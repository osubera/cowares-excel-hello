'ssf-begin
';

'class
'   name;SsfCellStream
'{{{
Option Explicit

'=== properties begin ===


Private TargetRange As Range
Private TargetSheet As Worksheet
Private MyProperty As String
Private MyRoll As String
Private CellEmptyValue As Variant
Private CellDefaultValue As Variant

Public Reader As Object     ' SsfCellStreamReader
Public Writer As Object     ' SsfCellStreamWriter
Public Queue As Object      ' SsfCellStreamQueue
Public Env As GlobalResources
Public Translator As Object
Public SsfEmptyValue As Variant
Public SsfDefaultValue As Variant

Public Property Get PropertyName() As String
    PropertyName = TranslatePropertyName(MyProperty, TargetRange)
End Property

Public Property Let PropertyName(NewProperty As String)
    Select Case LCase(NewProperty)
    Case "formula-or-value"
        Set Queue = New SsfCellStreamQueueFormula
    Case "value", "value2", "formula", "formular1c1"
        Set Queue = New SsfCellStreamQueueValue
    Case Else
        Set Queue = New SsfCellStreamQueueRange
    End Select
    
    Queue.SetUp Me, Env
    MyProperty = NewProperty
End Property

Public Property Get EmptyValue() As Variant
    EmptyValue = CellEmptyValue
End Property

Public Property Let EmptyValue(ByVal NewValue As Variant)
    SsfEmptyValue = TranslateFromCell(NewValue)
    CellEmptyValue = NewValue
End Property

Public Property Get DefaultValue() As Variant
    DefaultValue = CellDefaultValue
End Property

Public Property Let DefaultValue(ByVal NewValue As Variant)
    SsfDefaultValue = TranslateFromCell(NewValue)
    CellDefaultValue = NewValue
End Property

Public Property Get Worksheet() As Worksheet
    Set Worksheet = TargetSheet
End Property

Public Property Get Range() As Range
    Set Range = TargetRange
End Property

Public Sub SetWorksheet(Ws As Worksheet)
    Set TargetSheet = Ws
    If Ws Is Nothing Then
        Set TargetRange = Nothing
        Clear
    Else
        Set TargetRange = Ws.Cells
    End If
End Sub

Public Sub SetRange(Ra As Range)
    Set TargetRange = Ra
    If Ra Is Nothing Then
        Set TargetSheet = Nothing
        Clear
    Else
        If Not TargetSheet Is Ra.Worksheet Then Set TargetSheet = Ra.Worksheet
        'Env.LogWrite "SetRange: " & Ra.Address(False, False, xlA1, False)
    End If
End Sub

Public Sub SetRoll(NewRoll As String, Optional ExMode As Variant = "")
    Dim CellsWriter As String
    Dim WithoutQueue As Boolean
    Dim CrLf As String
    
    Select Case NewRoll
    Case "reader"
        CrLf = Env.GetEnv("ssf", "line-end", vbCrLf)
        Select Case CStr(ExMode)
        Case "fill"
            Set Reader = New SsfCellStreamReaderFill
        Case Else
            Set Reader = New SsfCellStreamReader
        End Select
        Reader.SetUp Me, Env
        Reader.LineFeed = CrLf
        
    Case "writer"
        CellsWriter = Env.GetEnv("ssf", "cells-writer", "block")
        WithoutQueue = Env.GetEnv("ssf", "cells-writer-without-queue", "false")
        Select Case CellsWriter
        Case "row", "column"
            Set Writer = New SsfCellStreamWriterRow
            Writer.Direction = CellsWriter
        Case "simple"
            Set Writer = New SsfCellStreamWriter
        Case "block"
            Set Writer = New SsfCellStreamWriterArea
            WithoutQueue = False
        Case Else
            Set Writer = New SsfCellStreamWriterArea
            WithoutQueue = False
        End Select
        If WithoutQueue Then Set Queue = New SsfCellStreamQueueDumb
        
    Case ""
        If Not Reader Is Nothing Then Set Reader = Nothing
        If Not Writer Is Nothing Then Set Writer = Nothing
        
    Case Else
        Exit Sub
    End Select
    
    MyRoll = NewRoll
End Sub

Public Function IsDefaultValue(Data As Variant) As Boolean
    IsDefaultValue = False
    
    If IsNull(Data) Then Exit Function
    If IsArray(Data) Then Exit Function
    If IsObject(Data) Then Exit Function
    
    IsDefaultValue = (Data = CellDefaultValue)
End Function

Public Function HasNoRanges() As Boolean
    HasNoRanges = (TargetRange Is Nothing) Or (PropertyName = "")
End Function

Public Function IsNotReady() As Boolean
    IsNotReady = Queue.IsEmptyQueue Or HasNoRanges
End Function

Public Sub Clear()
    Queue.ClearQueue
End Sub


'=== properties end ===
'=== spawn begin ===


Public Function Spawn() As SsfCellStream
    Set Spawn = New SsfCellStream
    With Spawn
        Set .Env = Env
        Set .Translator = Translator
        .PropertyName = PropertyName
        .EmptyValue = EmptyValue
        .DefaultValue = DefaultValue
    End With
End Function

Public Function SpawnAreas() As Collection
    Dim out As Collection
    Dim Spawned As SsfCellStream
    Dim R As Long
    Dim C As Long
    Dim Columns As Long
    Dim Data As Variant
    Dim AllEmpty As Boolean
    Dim TopLeftCell As Range
    
    If IsNotReady Then Exit Function
    
    Set out = New Collection
    Columns = TargetRange.Columns.Count
    'Env.LogWrite "empty: " & MyCellEmpty & " " & MyRawEmpty & " " & TypeName(MyCellEmpty) & " " & TypeName(MyRawEmpty)
    
    ' add 1 empty row as a terminator
    For C = 1 To Columns
        Queue.BaseQueue.Enqueue CellEmptyValue
    Next
    'Env.LogWrite Queue.Queue.Count
    
    Set Spawned = Spawn
    Set TopLeftCell = TargetRange.Cells(1)
    R = 0
    Do Until Queue.IsEmptyQueue
        AllEmpty = True
        For C = 1 To Columns
            Data = Queue.BaseQueue.Dequeue
            Spawned.Queue.BaseQueue.Enqueue Data
            'Env.LogWrite Data & " " & Spawned.Queue.Queue(Spawned.Queue.Queue.Count)
            'If Not (IsEmpty(Data) Or (Data = MyRawEmpty)) Then AllEmpty = False
            If Data <> CellEmptyValue Then AllEmpty = False
        Next
        'Env.LogWrite AllEmpty
        If AllEmpty Then
            Spawned.SetRange TargetSheet.Range(TopLeftCell, TopLeftCell.Cells(R + 1, Columns))
            'Env.LogWrite Spawned.Range.Address
            Spawned.Queue.OptimizeRange
            'Env.LogWrite TypeName(Spawned.Range)
            out.Add Spawned
            Set Spawned = Spawn
            Set TopLeftCell = TopLeftCell.Cells(R + 2, 1)
            R = 0
        Else
            R = R + 1
        End If
    Loop
    'Env.LogWrite Queue.Queue.Count
    Set Spawned = Nothing
    
    Set SpawnAreas = out
End Function


'=== spawn end ===
'=== cell reader / writer begin ===


Public Sub ReadFrom(Block As Variant, LocalKey As String, LocalProperty As String)
    ' parse cells-* block
    Dim Ws As Worksheet
    
    SetRoll "reader"
    
    Set Ws = Env.Current("worksheet")
    
    Clear
    PropertyName = LocalProperty
    SetWorksheet Ws
    
    ReadSsf Block
    
    SetRoll ""
End Sub

Public Sub ReadSsf(Block As Variant)
    Dim KeyValue As Variant
    Dim Key As String
    Dim Value As String
    
    On Error Resume Next
    
    Env.SetEnv "current", "repeat-counter", 0
    
    For Each KeyValue In Block
        SsfUtils.ExtractKeyValue KeyValue, Key, Value
        If Key = "fill" Then SetRoll "reader", "fill"
        If Reader.ReadSsf(Key, Value) Then GoTo DONE
        If Translator Is Nothing Then GoTo DONE
        Translator.ReadSsf Key, Value, Me
DONE:
        If Err.Number <> 0 Then
            Env.LogWrite PropertyName & ": " & Err.Number & " " & Err.Description & "(" & Key & "," & Value & ")"
            Err.Clear
        End If
    Next
    
    Reader.Flush
    If Err.Number <> 0 Then
        Env.LogWrite PropertyName & ": " & Err.Number & " " & Err.Description
        Err.Clear
    End If
End Sub

Public Sub WriteTo(Target As Range, Stream As Object, _
        LocalKey As String, LocalProperty As String, LocalEmptyValue As Variant)
    ' generate cells-* block
    SetRoll "writer"
    
    PropertyName = LocalProperty
    EmptyValue = LocalEmptyValue
    'Env.LogWrite "WriteTo: empty: " & CellEmptyValue & SsfEmptyValue
    Clear
    SetRange Target
    Writer.SetUp Me, Env
    
    Stream.WriteLine SsfWriter.SsfBlockBegin(LocalKey)
    WriteSsf Stream
    Stream.WriteLine SsfWriter.SsfBlockEnd
    
    SetRoll ""
End Sub

Public Sub WriteSsf(Stream As Object)
    On Error Resume Next
    
    Writer.WriteSsf Stream
    
    If Err.Number <> 0 Then
        Env.LogWrite Err.Number & " " & Err.Description
        Err.Clear
    End If
End Sub


'=== cell reader / writer end ===
'=== translator helper begin ===


Public Function TranslateFromCell(Data As Variant) As Variant
    If Translator Is Nothing Then
        TranslateFromCell = Data
    Else
        TranslateFromCell = Translator.FromCell(Data)
    End If
End Function

Public Function TranslateToCell(Data As Variant) As Variant
    If Translator Is Nothing Then
        TranslateToCell = Data
    Else
        TranslateToCell = Translator.ToCell(Data)
    End If
End Function

Public Sub TranslatorHeadWriter(Stream As Object)
    If Not Translator Is Nothing Then
        ' translator specific options
        Translator.WriteSsf Stream, Me
    End If
End Sub

Private Function TranslatePropertyName(ByVal FromProperty As String, FromRange As Range) As String
    Select Case LCase(FromProperty)
    Case "formula-or-value"
        If Not FromRange Is Nothing Then
            Select Case FromRange.HasFormula
            Case True
                FromProperty = "FormulaR1C1"
            Case False
                FromProperty = "Value"
            End Select
        End If
    End Select
    
    TranslatePropertyName = FromProperty
End Function


'=== translator helper end ===
'=== calss events begin ===


Private Sub Class_Initialize()
    Set Queue = New SsfCellStreamQueue
    CellDefaultValue = vbNullString
    SsfDefaultValue = vbNullString
End Sub

Private Sub Class_Terminate()
    Set Env = Nothing
    SetRange Nothing
    Clear
    Set Queue = Nothing
    Set Reader = Nothing
    Set Writer = Nothing
End Sub

'=== calss events end ===

'}}}

'ssf-end

