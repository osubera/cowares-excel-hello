'ssf-begin
';

'class
'   name;SsfUtilsExcelBook
'{{{
Option Explicit

Public TestBook As Workbook
Public TestSheet As Worksheet
Public TestCell As Range
Public Logger As Object

Private PushedWindow As Window

Private Sub Class_Initialize()
    PushActiveWindow
    
    Set TestBook = Application.Workbooks.Add
    TestBook.Windows(1).Visible = False
    Set TestSheet = TestBook.Worksheets(1)
    Set TestCell = TestSheet.Range("A1")
    
    PopActiveWindow
End Sub

Private Sub Class_Terminate()
    On Error Resume Next
    PushActiveWindow
    
    TestBook.Close False
    Set TestBook = Nothing
    Set TestSheet = Nothing
    Set TestCell = Nothing
    
    PopActiveWindow
End Sub

Private Sub MyLogger(Text As String)
    If Logger Is Nothing Then
        Debug.Print Text
    Else
        Logger.WriteText Text
    End If
End Sub

Public Sub PushActiveWindow()
    Set PushedWindow = ActiveWindow
End Sub

Public Sub PopActiveWindow()
    If PushedWindow Is Nothing Then Exit Sub
    PushedWindow.Activate
End Sub

Public Function IsValidAddress(ByVal Address As String) As Boolean
    On Error Resume Next
    Dim Dummy As Long
    Dummy = TestSheet.Range(Address).Row
    IsValidAddress = (Err.Number = 0)
End Function

Public Function R1C1ToA1(ByVal R1C1 As String) As String
    On Error Resume Next
    
    Dim A1 As String
    A1 = R1C1   ' on failed
    
    With TestCell
        .FormulaR1C1 = "=COUNTBLANK(" & R1C1 & ")"
        If Err.Number <> 0 Then
            MyLogger "ExcelAddressR1C1ToA1: Error " & Err.Number & " " & Err.Description & ": " & R1C1
        ElseIf IsError(.Value) Then
            MyLogger "ExcelAddressR1C1ToA1: Error : invalid address " & R1C1
        Else
            A1 = .DirectPrecedents.Address(False, False, xlA1, False)
        End If
        .Clear
    End With
    
    R1C1ToA1 = A1
End Function

Public Function CellWidthFromZero(ByVal Size As Double) As Double
    On Error Resume Next
    
    ' convert ColumnWidth(number of 0s) to Width(points)
    With TestCell
        .ColumnWidth = Size
        CellWidthFromZero = .Width
        .ColumnWidth = TestSheet.StandardWidth
        
        If Err.Number <> 0 Then
            CellWidthFromZero = .Width
            MyLogger "CellWidthFromZero: Error " & Err.Number & " " & Err.Description & "(" & Size & ")"
            Err.Clear
        End If
    End With
End Function

Public Function CellWidthToZero(ByVal Size As Double) As Double
    On Error GoTo Err1
    
    ' convert Width(points) to ColumnWidth(number of 0s)
    Dim x1 As Double, x2 As Double, x3 As Double
    Dim y1 As Double, y2 As Double, y3 As Double
    Dim i As Long
    
    Const DZero As Double = 0.000001
    Const EZero As Double = 0.255
    Const k1 As Double = 9.375
    Const k2 As Double = 6
    
    y1 = Size / k1
    y2 = Size / k2
    CellWidthToZero = (y1 + y2) / 2     ' start with an expected average
    
    With TestCell
        .ColumnWidth = y1
        x1 = .Width
        .ColumnWidth = y2
        x2 = .Width
    End With
    
    ' 3 times itteration is enough
    For i = 1 To 3
        If Abs(x2 - x1) < DZero Then Exit For           ' matured
        y3 = y1 + (Size - x1) * (y2 - y1) / (x2 - x1)   ' try linear
        With TestCell
            .ColumnWidth = y3
            x3 = .Width
        End With
        If Abs(Size - x3) < EZero Then Exit For         ' matured
        If Abs(Size - x1) > Abs(Size - x2) Then
            y1 = y3
            x1 = x3
        Else
            y2 = y3
            x2 = x3
        End If
    Next
    
    CellWidthToZero = y3
    TestCell.ColumnWidth = TestSheet.StandardWidth
    Exit Function
    
Err1:
    MyLogger "CellWidthToZero: Error " & Err.Number & " " & Err.Description & "(" & Size & ")"
    TestCell.ColumnWidth = TestSheet.StandardWidth
End Function

'}}}

'ssf-end

