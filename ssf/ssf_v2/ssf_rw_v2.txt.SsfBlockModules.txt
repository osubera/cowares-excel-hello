'ssf-begin
';

'module
'   name;SsfBlockModules
'{{{
Option Explicit

Public Sub ReadFrom(Block As Variant, ByVal Env As GlobalResources, _
        Optional ByVal BlockName As String = "module")
    Dim KeyValue As Variant
    Dim Key As String
    Dim Value As String
    Dim Source As String
    
    If Not ShallDumpModule(Env.Current("workbook"), Env) Then Exit Sub
    
    Env.LogWrite BlockName
    Source = ""
    
    On Error Resume Next
    
    For Each KeyValue In Block
        Select Case SsfUtils.ExtractKeyValue(KeyValue, Key, Value)
        Case "name"
            SwitchModule Value, Env, BlockName
        Case ""
            Source = Source & Value
        End Select
        If Err.Number <> 0 Then
            Env.LogWrite BlockName & ": " & Err.Number & " " & Err.Description & "(" & Key & "," & Value & ")"
            Err.Clear
        End If
    Next
    
    If Source <> "" And Not Env.Current("module") Is Nothing Then
        With Env.Current("module").CodeModule
            .DeleteLines 1, .CountOfLines
            .InsertLines 1, Source
        End With
    End If
End Sub

Public Sub ProjectRequiresReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "require"
    
    Dim KeyValue As Variant
    Dim Key As String
    Dim Value As String
    Dim Project As VBProject
    Dim GuidMajorMinorDescription As Variant
    
    If Not ShallDumpModule(Env.Current("workbook"), Env) Then Exit Sub
    
    Env.LogWrite LocalKey
    Set Project = Env.Current("workbook").VBProject
    
    On Error Resume Next
    
    For Each KeyValue In Block
        Select Case SsfUtils.ExtractKeyValue(KeyValue, Key, Value)
        Case ""
            GuidMajorMinorDescription = DivideLine(Value, " ", 4)
            Env.LogWrite GuidMajorMinorDescription(3)
            Project.References.AddFromGuid GuidMajorMinorDescription(0), GuidMajorMinorDescription(1), GuidMajorMinorDescription(2)
        End Select
        If Err.Number <> 0 Then
            Env.LogWrite LocalKey & ": " & Err.Number & " " & Err.Description & "(" & Key & "," & Value & ")"
            Err.Clear
        End If
    Next
End Sub

Public Sub WriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Dim Module As VBComponent
    Dim BookModule As VBComponent
    
    If Not ShallDumpModule(Target, Env) Then Exit Sub
    
    If ShallDumpModuleEach(Target, Env) Then
        WriteToEach Target, Stream, Env
    Else
        ' let ThisWorkbook go to the last
        For Each Module In Target.VBProject.VBComponents
            If Module.Name = "ThisWorkbook" Then
                Set BookModule = Module
            Else
                VbaCodeModuleWriteTo Module.CodeModule, Stream, Env
            End If
        Next
        If Not BookModule Is Nothing Then
            VbaCodeModuleWriteTo BookModule.CodeModule, Stream, Env
        End If
    End If
End Sub

Public Sub WriteToEach(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Dim Module As VBComponent
    Dim Spawned As Object
    
    For Each Module In Target.VBProject.VBComponents
        Set Spawned = Stream.OpenSpawn(Module.Name)
        If Not Spawned Is Nothing Then
            SsfWriter.WriteSsfBegin Spawned
            VbaCodeModuleWriteTo Module.CodeModule, Spawned, Env
            SsfWriter.WriteSsfEnd Spawned
            Set Spawned = Spawned.CloseSpawn
        End If
    Next
End Sub

Public Sub VbaCodeModuleWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Dim LocalKey As String
    Dim Names As String
    Dim NumberOfLines As Long
    Dim Source As String
    
    LocalKey = VbaModuleTypeToSsfBlockName(Target)
    Names = VbaModuleCodeName(Target)
    NumberOfLines = Target.CountOfLines
    
    If NumberOfLines > Target.CountOfDeclarationLines Then
        ' avoid to print a blank code, that contains "Option Explicit" only
        Env.LogWrite LocalKey
        Env.LogWrite Names & " " & CStr(NumberOfLines)
        Stream.WriteLine SsfWriter.SsfBlockBegin(LocalKey)
        Stream.WriteLine SsfWriter.MakeSsfLine("name", Names)
        
        Source = Target.Lines(1, NumberOfLines)
        ' need at least one linefeed on the end, and prefer just 1
        Source = Chop(Source, vbCrLf) & vbCrLf
        ' vba sources use vbCrLf
        Source = LineFeedFromCrLf(Source, Env.GetEnv("ssf", "line-end", vbCrLf))
        
        Stream.WriteLine SsfWriter.MakeSsfLineEscaped(Source)
        Stream.WriteLine SsfWriter.SsfBlockEnd
    End If
End Sub

Public Sub ProjectRequiresWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "require"
    
    Dim NumberOfReferences As Long
    Dim i As Long
    
    If Not CanReallyTouchVBProject(Target) Then Exit Sub
    
    NumberOfReferences = Target.VBProject.References.Count
    If NumberOfReferences = 0 Then Exit Sub
    ' it doesn't work, because we have at least 4 references.
    
    Env.LogWrite LocalKey
    Stream.WriteLine SsfWriter.SsfBlockBegin(LocalKey)
    
    For i = 1 To NumberOfReferences
        ' avoid to print 4 standard references
        ' VBA (builtin), Excel (builtin), stdole and Office
        With Target.VBProject
            If Not .References(i).BuiltIn Then
                If LCase(.References(i).Name) <> "stdole" _
                        And LCase(.References(i).Name) <> "office" Then
                    ' machine needs Guid, Major and Minor.  human needs Description
                    Stream.WriteLine SsfWriter.MakeSsfLine("", _
                        .References(i).GUID & " " & _
                        .References(i).Major & " " & _
                        .References(i).Minor & " " & _
                        .References(i).Description)
                End If
            End If
        End With
    Next
    
    Stream.WriteLine SsfWriter.SsfBlockEnd
End Sub

Public Function CanTouchVBProject() As Boolean
    ' it doesn't check protection of each book.
    ' it's purpose is to check the excel setting to trust vba accessing the vbprojet object.
    On Error GoTo NoTouches
    
    Dim Dummy As Long
    Dummy = ThisWorkbook.VBProject.Protection
    CanTouchVBProject = True
    Exit Function
    
NoTouches:
    CanTouchVBProject = False
End Function

Public Function CanReallyTouchVBProject(Target As Object) As Boolean
    Dim out As Boolean
    
    out = CanTouchVBProject
    If out Then out = Not IsLockedProject(Target)
    
    CanReallyTouchVBProject = out
End Function

Public Function IsLockedProject(Target As Object) As Boolean
    Dim P As VBProject
    
    Select Case TypeName(Target)
    Case "VBProject"
        Set P = Target
    Case "Workbook"
        Set P = Target.VBProject
    Case "Worksheet"
        Set P = Target.Parent.VBProject
    Case Else
        IsLockedProject = True
        Exit Function
    End Select
    
    IsLockedProject = (P.Protection = vbext_pp_locked)
    Set P = Nothing
End Function

Public Function ShallDumpModule(ByVal Target As Object, ByVal Env As GlobalResources) As Boolean
    On Error Resume Next
    Dim out As Variant
    
    out = Env.GetEnv("ssf", "enable-module", "true")
    out = CBool(out)
    If Err.Number <> 0 Then ' every or others
        out = True
        Err.Clear
    End If
    
    If out Then
        out = CanReallyTouchVBProject(Target)
        If Not out Then Env.LogWrite "ShallDumpModule: module disabled by protection"
    End If
    
    ShallDumpModule = out
End Function

Public Function ShallDumpModuleEach(ByVal Target As Object, ByVal Env As GlobalResources) As Boolean
    Dim out As Boolean
    
    out = (LCase(Env.GetEnv("ssf", "enable-module", "true")) = "every")
    If out Then out = CanReallyTouchVBProject(Target)
    
    ShallDumpModuleEach = out
End Function

Public Function VbaModuleTypeToSsfBlockName(Target As Object) As String
    Dim ModuleType As String
    Dim TargetModule As Object
    
    If TypeName(Target) = "CodeModule" Then
        Set TargetModule = Target.Parent
    Else
        Set TargetModule = Target
    End If
    
    Select Case TargetModule.Type
    Case vbext_ct_StdModule
        ModuleType = "module"   ' Module
    Case vbext_ct_ClassModule
        ModuleType = "class"    ' Class
    Case vbext_ct_MSForm
        ModuleType = "form"     ' not for Excel 2000
    Case vbext_ct_ActiveXDesigner
        ModuleType = "activex"
    Case vbext_ct_Document
        ModuleType = "code"     ' Excel Objects
    Case Else
        ModuleType = "unknown-type-" & TargetModule.Type
    End Select
    
    Set TargetModule = Nothing
    VbaModuleTypeToSsfBlockName = ModuleType
End Function

Public Function SsfBlockNameToVbaModuleType(BlockName As String) As Long
    Dim out As Long
    
    Select Case BlockName
    Case "activex"
        out = vbext_ct_ActiveXDesigner  ' not defined in ssf
    Case "form"
        out = vbext_ct_MSForm           ' not for Excel 2000 form?
    Case "code"
        out = vbext_ct_Document
    Case "class"
        out = vbext_ct_ClassModule
    Case "module"
        out = vbext_ct_StdModule
    Case Else
        out = vbext_ct_StdModule        ' default is module
    End Select
    
    SsfBlockNameToVbaModuleType = out
End Function

Public Function VbaModuleCodeName(Target As Object) As String
    If TypeName(Target) = "CodeModule" Then
        VbaModuleCodeName = Target.Parent.Name
    Else
        VbaModuleCodeName = Target.Name
    End If
End Function

Private Sub SwitchModule(Name As String, Env As GlobalResources, BlockName As String)
    ' 1. add a new component unless names are given
    ' 2. search existing component for the given name
    ' 3. make a copy if "safe-module" is "true"
    ' 4. add a new component if above 2nd fails
    ' 5. do not add sheets and thisworkbook
    
    Dim Project As VBProject
    Dim Comp As VBComponent
    Dim NewName As String
    Dim NewType As vbext_ComponentType
    Dim ComponentType As vbext_ComponentType
    Dim ModuleFound As Boolean
    
    ComponentType = SsfBlockNameToVbaModuleType(BlockName)
    Env.LogWrite "component type " & ComponentType
    
    Set Project = Env.Current("workbook").VBProject
    ModuleFound = False
    On Error GoTo AddNew
    
    ' rule#1 no names
    If Name = "" Then GoTo AddNew
    
    ' rule#2 search
    Set Comp = Project.VBComponents(Name)
    ModuleFound = True
    Env.LogWrite Name & " found"
    If Comp.Type <> ComponentType Then GoTo AddNew
    
    ' rule#3 safe
    If CBool(Env.GetEnv("ssf", "safe-module", "false")) Then GoTo AddNew
    
    GoTo DONE
    
    ' rule#4 add
AddNew:
    Select Case Err.Number
    Case 0
        GoTo AddNew2
    Case 9
        Env.LogWrite Name & " is not found."
    Case Else
        Env.LogWrite Name & " " & Err.Number & " " & Err.Description
    End Select
    Resume AddNew2
AddNew2:
    On Error Resume Next
    
    ' rule#5 add modules instead of documents
    NewName = Env.GetEnv("ssf", "copy-of", "COPY_ooop_") & Name
    Select Case BlockName
    Case "module", "class"
        NewType = ComponentType
        If Not ModuleFound Then NewName = Name
    Case Else
        NewType = SsfBlockNameToVbaModuleType("module")
    End Select
    
    Set Comp = Project.VBComponents.Add(NewType)
    If NewName <> "" Then Comp.Name = NewName
    If Comp Is Nothing Then
        Env.LogWrite "failed to switch " & Name & " " & Err.Number & " " & Err.Description
        Exit Sub
    End If
    Env.LogWrite "add " & NewName & " type " & VbaModuleTypeToSsfBlockName(Comp)
    
DONE:
    Set Env.Current("module") = Comp
End Sub

'}}}

'ssf-end

