#summary zipcode data of japan post
#labels Phase-Design

<wiki:toc max_depth="3" />

= 概要 =
 * 日本郵便の郵便番号データについて
 * [yubin] 作成時に実施した調査の記録

= URL =

 * 郵便番号トップ
    http://www.post.japanpost.jp/zipcode/index.html
 * データダウンロードトップ
    http://www.post.japanpost.jp/zipcode/download.html
 * バーコードマニュアル
    http://www.post.japanpost.jp/zipcode/zipmanual/index.html

= 競合製品 =

 * 郵香
    * http://www.yu-bin.net/download/
    * 検索で上位に出る。
    * mdb をバックに使って、アクセスを使わないという点は似ているが、インターフェースはゴージャス。
 * Microsoft 謹製アドイン
    * http://www.microsoft.com/downloads/details.aspx?FamilyID=6f6af8ef-b9dd-4e21-9e63-af4a0ff4e7ce&displayLang=ja
    * Excel アドイン: 郵便番号変換ウィザード (2000-2007 ユーザー用)
    * こいつはバーコード生成もサポートする強者

 # こちらはシンプル画面＋コマンド、という独自コンセプトを持つので、実際にはあまり被らない。

= 日本郵便が公開しているデータ =

 * 地域別データと事業所データの２種類がある。
 * ファイル形式も、表立っては LZH だが、隠し ZIP 画面があって、やはり２種類あることになる。
 * 地域別データは、読み仮名の表記方法で３種類にわかれている。
    * 拗音あり、拗音なし、ローマ字
 * 地域データは、最新データを全部持つものと更新用の差分情報の２種類がある。
 * 最新データには、全国一括と都道府県別の２種類がある。
 * 全国一括は、ダウンロードページでは見づらいが、都道府県別の最後、沖縄の隣に全国版がある。
 * 差分情報は、全国版のみで都道府県別のはない。
 * 差分情報には、新規追加情報と、廃止情報がある。
 * 事業所データは、一括版と差分版がある。
 * 事業所データに都道府県別はない。

= ファイルフォーマットの仕様の説明ページ =

 * http://www.post.japanpost.jp/zipcode/dl/readme.html
 * http://www.post.japanpost.jp/zipcode/dl/readme_ro.html
 * http://www.post.japanpost.jp/zipcode/dl/jigyosyo/readme.html

= ファイルフォーマットの注意点 =

 * 地域別と事業所で仕様が違う。
 * かなとローマ字で仕様が違う。
 * かなは半角かな。
 * 拗音の小さいと大きいは同じ仕様。
 * 全角となっている町域部分の文字数が38文字を越える場合、また半角となっているフリガナ部分の文字数が76文字を越える場合は、複数レコードに分割しています。 という記載があるが、これについては、実際どう分割されるのか書いてないし、ダウンロードしたレコードに、一見、該当するものが見当たらない。
 * 古い大型ホスト上のデータベースに基づいた仕様なので、あまり美しいものではない。
 * 郵便番号そのもののいびつさを処理するための変なフラグがたくさんある。
 * 郵便番号の定義がわからないと、何をキーにしてよいかわからん。
    * http://www.post.japanpost.jp/zipcode/zipmanual/p04.html
    * ここに定義っぽいものがあるが、よくわからない。
    * フラグから想像するに、郵便番号についても、地域名についても、何１つユニークさは保証されていない、が正解のように思う。その前提でシステム設計すべき。
 * 全国地方公共団体コードというのが使えそうだ。
    * 地域別では、 JIS X0401, X0402 という名称で、事業所用では、所在地のJISコードという名称で、いずれも先頭カラムになっていて、 5 bytes ある。
    * これがいずれも、先頭2文字が県、次の3文字が市レベルを示す共通コードのようだ。
    * これは JIS 規格なので、これをキーとしてインデックス構成するのが物事をすっきりさせそうだ。
    

= テーブル設計のポイント =

 * 検索用データの重要なインデックスは、団体コードと、郵便７桁だけで良い。
 * 検索データから県、市レベルの名称は除外する。
 * 団体コード翻訳テーブルは、県と市レベルについて、各々作る。
 * 町レベルの名称でのインデックスは、団体コードとの複合キーでないと無意味、実際には、団体コードで十分絞り込まれるはずなので、インデックス無しと割り切る方が良さそう。どうせ部分一致検索するのだから、べた読みで構わない。


= 最低限の機能提供に必要なものを絞り込む =

 # 郵便７桁から住所検索
    * yubin7 indexed
    * 対応する漢字
    * 対応するかな２種
    * 対応するローマ字

 # 住所から郵便７桁検索
    * 県 index
    * 対応する県レベルコード
    * 市 index
    * 対応する団体コード
    * 団体コード index
    * 町レベル情報
    * 対応する郵便７桁
 # 不要なもの
    * 単純検索する上で、フラグは気にしなくてよいと思われる。厳密なアプリや情報管理でない。
    * 旧５桁番号も、もはやいらないだろう。


= アプリケーションの案 =

 # 住所からの検索で、ほとんどのケースで、県は固定のはず。
    * 基本は「香川県 高松市 扇町」と入れさせるのだが、
    環境変数 SET KENKOTEI=香川県
    で、それを省略できる、というのが現実的な気が。
    * じゃあ、 SHIKOTEI=高松市
    もありか。
 # 県、市、町の各レベルで key-value 的テーブルを持つだけだな。
    * 町レベルだと、key が２つになるってぐらい。
 # 事業所データは、おそらく JIS というのが、団体コードなので、環境変数による県固定は使える。
 # 事業所の住所とかは無視して、事業所名１点での検索でよいのでは？
    * 事業所名が町レベルなわけだから、同じ動きにできる。
 # SET OOGUCHI= という事業所のみ指定もあり？
 # 郵便番号から検索のときは、両方見ないといけない。
 # 半角かなからの検索っていまいち入力しにくいので、全角のひらがなの方が良い？
 # vbscript に !StrConv が無いので、クエリのビルトイン関数を使ってデータ更新時に変換するのがうまそう。
    * ビルトインって、 mdb 自体に保存できてるので、アクセスが無くても動く。結構よい。
 # 「以下に掲載がない場合」というレコードをどうするべきか？
    * 見つからないときの fall back 候補に出さないといけない。
    * こいつの意味は、
    団体コードに割り当てられた、フォールバック番号だから、
    個別レコードテーブルではなく、市レベルのテーブルにあるはずのもの。
    ただし、郵便番号から検索のときに必要なので、
    個別テーブルから消すわけにはいかない。
    * フラグとかないので、文字でべったりと識別するしかない。
 # 扱うかなデータは、拗音大文字のものだけでよく、検索文字入力に対して、検索時に、拗音小文字のみ、変換をかけてから探せば済む。
 # ローマ字は、今回は考えない。必要なら後で加える。
 # 更新は、新規mdb に追加するという総入れ替え方式だけにすれば、削除スクリプトすら不要。
    * 実際、mdb が肥大化するので、削除せず、常に新品の空mdb に追加する方式が良い。
 # 必要なスクリプト
    * ダウンロードするためのスクリプト
    * 更新するためのスクリプト
    * 検索するためのスクリプト



= 検索動作を明確にする =

 # バッチモード //B のとき
    * !StdIn を引数として処理し、
    * 結果を !StdOut に出す。
 # 引数を受け取ったとき
    * 引数を処理し、単発出力して終える。
    * 出力先は c/w に依存して Echo する。
 # 引数を受けないとき
    * プロンプトを出し、検索ループに入る。
    * 入力が与えられなかったとき、終了。

 * c/w に依存して、コマンドプロンプト側とポップアップ側を使い分ける。
 * ポップアップ(inputbox)では、前回入力分が、デフォルトに入る。
 * コマンドプロンプトはデフォルトが入れられないので、その機能は無い。
 * 上記、いずれも、入力パラメータ処理と、出力書式は変わらない。

= 入力パラメータ = 

 * 最初の引数の第1文字が数字なら、郵便番号指定とみなす。
 * 郵便番号が７桁ないときは前方一致。
    * １桁だけとか、出すぎる。ローカル資源だからいいか？
 * 郵便番号のときは、数字以外を無視するので、ハイフンやスペースが入ってもかまわない。
 * 名称引数は、県、市、町の順に、空白を入れて分割して指定。
 * 名称は、漢字でもかなでもよい。両方サーチする。漢字が先。
 * かなは全角ひらがなで、拗音はいずれでも可。
 * 県と市は完全一致のみ。町は前方一致。
 * 町該当無ければ、以下に記載がなしのレコードを出す。※で示す。
 * 県の一文字を入れれば、都道府県一覧を出す。
 * 県名のみ入れれば、県内の市一覧を出す。
 * 県名、市名のみ入れれば、以下に記載がないときのレコードを出す。
 * 事、事業、事業所、を第一引数に入れると、大口事業所とみなす。
    * これはNG。町名の先頭とかぶる。＄を使う。
    * 引数が１つずつシフトするだけで、以降は、町名検索と同一。
    * 町名部分が、事業所名になるだけ。

= 環境変数 =

 * KENKOTEI 県名省略指定
 * SHIKOTEI 市名省略指定


= 動作とかバグフィックスのメモ = 

ken_all.csv

読み込み処理に、８分かかった。
その間 cpu が 100% ではりついている。
メモリやディスクは余裕っぽい。

mdb は 30M になった。

ken
漢字最長は４文字、かなは６文字
こいつらは８文字で最適化しよう。

shi
1901 rec

yubin_misc が入ってないのは、
今のところ、 records = 1 のところだけのようだ。
★　追加するよう修正した。miscは全部入った

漢字１０文字、かな１９文字が最大。
レコードは1146件が最大。

２４、４８で最適化しておく


cho
122,990 rec

これは文字インデックスは無いので気にしない


郵便番号１桁検索にいくと
cpu 100% で死ぬ。
これは改良が必要

6x  17,990
61x  1,832
610x    90

やはり先頭３桁まで必須にしないと件数的に無理だし、
出力に意味が無い。

バッチモードは別としても。

対話モードだと、
最後２桁がフリーでも結果が全部読めないから、
実際のところ最後１桁以外、意味はなさそう。

ただし、速度的には、前３桁固定なら、問題なし。

★数字３桁未満ならモードクリアして検索動作しないことにしよう


町名がひらがなのとき、
たまたま、ひらがなから始まる漢字名の町があると、
それだけがヒットして、
本来の、それを読み仮名としたものが出てこない

福島県　郡山市　あぶくま台
どうしよう？

★　先にかな検索する、という方針で問題なさそうだ。


jigyosyo

cho, aza は空文字許可しないといけないようだ。
こちらはは１分強で更新した。
最終的にサイズは４３メガになった

21,592 rec


郵便番号から検索のときに、
事業所テーブルを読んでいない

★　読むようにした


検索に必須な４テーブルだけを、
新規mdbにエクスポートする方法で最適化してみたら、
ファイルサイズは 12.3M になった。
かなり小さくなる。


事業検索は、（株）とか多いので、部分一致のがいいのかな。

★　対応した、なかなかよい


かな検索で、
カタカナや半角かなが使えるのは、
db自身の日本語検索機能による。
３種類のかなを同一化したインデックスを持っているから。

ただし、
拗音扱いは、こちらの変換テーブルに、全角ひらがなしかやってないので、
東京都　府中市　フチユ　は出るが
東京都　府中市　フチュ　は出ない。

これは、こういう仕様ということで良いだろう。


更新時間の大部分は、 csv 読み込み。
つまり、 regexp に cpu が食われているわけだ。

最近の速いマシンなら１分切るので、
実用上はまったく問題ない、というか、
更新も速いということになる。

新しい器に入れたら、mdbサイズは 35M になった。
まあまあだろう。

あとは、
アクセスのいないマシンでの更新が確認できれば、
リリースして良し。

Win７で確認
４分かかったがok
ネットブックの cpu は100%になった。
コアが複数無いと、更新処理が重いようだ。


