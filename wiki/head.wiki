#summary print the first 10 lines of each file
#labels Phase-Requirements,Phase-Design,Phase-Deploy

<wiki:toc max_depth="3" />

= Introduction =

 * print the first 10 lines of each file

== 概要 ==
 * テキストファイルの先頭１０行だけを見る

= Details =

http://4.bp.blogspot.com/_EUW0nrj9XlM/TU9PP26huEI/AAAAAAAAACo/N0H0ub56MfA/s1600/shot1.png
http://4.bp.blogspot.com/_EUW0nrj9XlM/TU9PQplGk3I/AAAAAAAAACs/O8goFb12dI4/s1600/shot2.png
http://1.bp.blogspot.com/_EUW0nrj9XlM/TU9PRAfugAI/AAAAAAAAACw/GYkcaOlRKIA/s320/shot3.png

 * print the first 10 lines of each file. you can specify the number. or specify to print by the characters number.
 * works with a mouse.
 * same thing as the head command in unix os like the Linux.
 * no preconditions are required for almost Windows, because it's all written by `VBScript` .
 * and free to customize.

== 説明 ==
 * 大きなテキストファイルから、指定した行数や文字数だけを取り出す。
 * コマンドプロンプトだけでなく、マウス操作も可能。
 * Linux など unix 系の head コマンドとほぼ同じ。
 * `VBScript` だけで書かれているので、ほとんどのウィンドウズ環境でそのまま動く。
 * 好き勝手にカスタマイズできる。

= Downloads =

 * [http://code.google.com/p/cowares-excel-hello/downloads/list?can=2&q=head downloads / ダウンロード]

= How to use =

 # open a Windows Command Prompt. (cmd.exe)
 # enter `CScript head.vbs 37kagawa.csv`
 # you've got the first 10 lines of 37kagawa.csv in the console.
 # drag-and-drop a file into `head.vbs` icon works too.
 # the command does not parse any wild cards. the shell should do the task actually.

== 使い方 ==
 # コマンドプロンプトを開く。
 # `CScript head.vbs 37kagawa.csv`
 # 37kagawa.csv の先頭１０行だけが表示される。
 # 読みたいファイルを、 head.vbs アイコンにドラッグドロップして読むこともできる。
 # ワイルドカード展開はできない。それは本来シェルの仕事だけど。


= Code =

=== head.vbs ===

{{{
' head
' print the first 10 lines of each file to standard output.
' read standard input when without file or the file name is `-`
' precede a file name to each file when more than one files are specified.
' Copyright (C) 2011 Tomizono - kobobau.com
' Fortitudinous, Free, Fair, http://cowares.nobody.jp

' usage> CScript //Nologo head.vbs [/n:LINE NUMBER] [/c:CHARACTER NUMBER] [FILE]...

On Error Resume Next
Set Args = WScript.Arguments
Main Args.Unnamed, Args.Named
If Err.Number <> 0 Then WScript.Echo Err.Description
WScript.Quit(Err.Number)

Sub Main(Files, Opts)
    Dim vFiles, FilesCount
    Dim vLines
    
    FilesCount = Files.Count
    If FilesCount = 0 Then
        vFiles = Array("-")
        FilesCount = 1
    Else
        Set vFiles = Files
    End If
    
    vLines = 10
    If Opts("n") <> "" Then
        vLines = CLng(Opts("n"))
    End If
    
    vChars = 0
    If Opts("c") <> "" Then
        vChars = CLng(Opts("c"))
    End If
    
    Head vFiles, FilesCount, vLines, vChars
End Sub

Sub Head(Files, FilesCount, vLines, vChars)
    Dim File, WithHeader, CountDown
    Dim StdOut, WithConsole
    Dim fs, ts
    Const TristateFalse = 0
    Const ForReading = 1
    
    WithConsole = HasConsole()
    If WithConsole Then
        Set StdOut = WScript.StdOut
    Else
        Set StdOut = New StringStream
    End If
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    WithHeader = (FilesCount > 1)
    
    For Each File in Files
        If WithHeader Then StdOut.WriteLine File
        
        If File = "-" Then
            Set ts = WScript.StdIn
        Else
            Set ts = fs.OpenTextFile(File, ForReading, False, TristateFalse)
        End If
        
        If vChars > 0 Then
            HeadCharAFile ts, StdOut, vChars
        Else
            HeadLineAFile ts, StdOut, vLines
        End If
        
        ts.Close
        Set ts = Nothing
    Next
    
    If Not WithConsole Then WScript.Echo StdOut.Text
    
    Set fs = Nothing
    Set StdOut = Nothing
End Sub

Sub HeadLineAFile(inSt, outSt, ByVal Counter)
    Do Until inSt.AtEndOfStream
        Counter = Counter - 1
        If Counter < 0 Then Exit Do
        outSt.WriteLine inSt.ReadLine
    Loop
End Sub

Sub HeadCharAFile(inSt, outSt, ByVal Counter)
    If inSt.AtEndOfStream Then Exit Sub
    outSt.Write inSt.Read(Counter) & vbCrLf
End Sub

Function HasConsole()
    HasConsole = (UCase(Left(Right(WScript.FullName,11),1)) = "C")
End Function

Class StringStream
    Public Text
    
    Public Sub WriteLine(Data)
        Text = Text & Data & vbCrLf
    End Sub
    
    Public Sub Write(Data)
        Text = Text & Data
    End Sub
End Class
}}}

=== head.bat ===

{{{
@ECHO OFF
CScript //Nologo C:\tmp\head.vbs %*
}}}
