'ssf-begin
';

'workbook
'   name;hello_charset_adodb_stream.xls/VBAProject

'book-identity

'require
'       ;{00000205-0000-0010-8000-00AA006D2EA4} 2 5 Microsoft ActiveX Data Objects 2.5 Library

'worksheet
'   name;Sheet1

'module
'   name;HelloCharsetAdodbStream
'{{{
Option Explicit

Const HelloText = "お帰りなさいませ"

Function Charsets() As Variant
    Charsets = Array("unicode", "utf-8", "shift_jis", "euc-jp", "iso-2022-jp")
End Function

Function GenerateFileName(Enc As Variant) As String
    GenerateFileName = "C:\tmp\" & LCase(CStr(Enc)) & ".txt"
End Function

' execute a test to save files encoded by specified character set,
' and see the result by direct binary dump
Sub SaveFiles()
    Dim Enc As Variant
    Dim FileName As String
    
    For Each Enc In Charsets
        FileName = GenerateFileName(Enc)
        SaveFileEncoded FileName, HelloText, Enc
        Debug.Print "charset: " & Enc
        Debug.Print DumpFileBinary(FileName)
    Next
End Sub

' execute a test to read files encoded by specified character set,
' and see the result by stream binary dump, finaly by result texts.
Sub ReadFiles()
    Dim Enc As Variant
    Dim FileName As String
    
    For Each Enc In Charsets
        FileName = GenerateFileName(Enc)
        SaveFileEncoded FileName, HelloText, Enc
        Debug.Print "charset: " & Enc
        Debug.Print DumpStreamBinary(FileName)
        Debug.Print DumpFileText(FileName, Enc)
    Next
End Sub

' execute a test to save a file encoded by utf-8 without BOM.
Sub SaveFileAsUTF8withoutBOM()
    Const Enc = "utf8-nobom"
    Dim FileName As String
    
    FileName = GenerateFileName(Enc)
    SaveFileNoBom FileName, HelloText
    Debug.Print "charset: " & Enc
    Debug.Print DumpFileBinary(FileName)
End Sub

' watch binaries in a file directly
Function DumpFileBinary(FileName As String) As String
    Dim out As String
    Dim bss() As Byte
    Dim bs As Variant
    
    Open FileName For Binary Access Read As #1
    ReDim bss(0 To LOF(1) - 1)
    Get #1, , bss
    Close #1
    
    out = ""
    For Each bs In bss
        out = out & Hex(bs) & " "
    Next
    DumpFileBinary = out
End Function

' watch binaries in a file using the ADODB.Stream
Function DumpStreamBinary(FileName As String) As String
    Dim Stream As ADODB.Stream
    Dim out As String
    Dim bs As Variant

    Set Stream = New ADODB.Stream
    Stream.Open
    Stream.Type = adTypeBinary
    Stream.LoadFromFile FileName
    out = ""
    Do Until Stream.EOS
        bs = Stream.Read(1)
        out = out & Hex(bs(0)) & " "
    Loop
    Stream.Close
    Set Stream = Nothing
    
    DumpStreamBinary = out
End Function

' read text from a file encoded by a specified character set, using the ADODB.Stream
' means convert encoded text file into a vba unicode string
Function DumpFileText(FileName As String, ByVal Enc As String) As String
    Dim Stream As ADODB.Stream
    Dim out As String
    Dim bs As Variant

    Set Stream = New ADODB.Stream
    Stream.Open
    Stream.Type = adTypeText
    Stream.Charset = Enc
    Stream.LoadFromFile FileName
    
    'SkipBom Stream
    
    out = Stream.ReadText
    Stream.Close
    Set Stream = Nothing
    
    DumpFileText = out
End Function

' save a text into a file with specified character set, using the ADODB.Stream
Function SaveFileEncoded(FileName As String, Text As String, ByVal Enc As String) As Boolean
    Dim Stream As ADODB.Stream
    
    Set Stream = New ADODB.Stream
    Stream.Open
    Stream.Charset = Enc
    Stream.WriteText Text
    Stream.SaveToFile FileName, adSaveCreateOverWrite
    Stream.Close
    Set Stream = Nothing
End Function

' save a text into a file encoded by UTF-8 without BOM, using the ADODB.Stream
Function SaveFileNoBom(FileName As String, Text As String) As Boolean
    Dim Stream As ADODB.Stream
    Dim x As Variant
    Dim bs As Variant
    
    Set Stream = New ADODB.Stream
    Stream.Open
    Stream.Charset = "UTF-8"
    Stream.WriteText Text
    
    ' skip 3 bytes BOM
    Stream.Position = 0
    Stream.Type = adTypeBinary
    Stream.Position = 3
    bs = Stream.Read
    Stream.Close
    
    ' save as binary
    Stream.Open
    Stream.Type = adTypeBinary
    Stream.Write bs
    Stream.SaveToFile FileName, adSaveCreateOverWrite
    Stream.Close
    Set Stream = Nothing
End Function

' === WE DON'T NEED THIS SkipBom FUNCTION AFTER FIX FOR ISSUE 24 ===
'
' detect BOMs, locate the position after the BOM, and return a length of the BOM.
' adTypeText and Charset must be set to the Stream before calling this.
Function SkipBom(Stream As ADODB.Stream) As Long
    ' detect the stream is utf8 with bom or others.
    ' skip 5 or utf-8 bom, skip 2 for others.
    ' Position method works as binary counts while the Steram type is text.
    ' NOTE that the detected length in text type stream has no meaning for this boms,
    ' so we cann't do anything by string functions or binary functions after read.
    
    ' utf-8 bom are following 5 bytes in binary stream
    ' FF FE EF BB BF
    ' and are following 4 bytes in text stream of utf-8, is 2 length string
    ' 20 00 FF FE
    ' we detect this.
    
    ' unicode stream works without calling this, means skip 2 byte automatically,
    ' and also work at skipped one.
    ' others (shift_jis,,,) will not work without explicit skipping of thie 2 bytes.
    ' Position start at 0
    
    Dim bs As String
    Dim i As Long
    Dim TextBom As Variant
    
    TextBom = Array(&H20, &H0, &HFF, &HFE)
    bs = Stream.ReadText(2)
    For i = 1 To 4
        If AscB(MidB(bs, i, 1)) <> CByte(TextBom(i - 1)) Then GoTo NOBOM
    Next
    
BOM:
    Stream.Position = 5
    SkipBom = 5
    Exit Function
    
NOBOM:
    Stream.Position = 2
    SkipBom = 2
End Function

'}}}

'ssf-end

