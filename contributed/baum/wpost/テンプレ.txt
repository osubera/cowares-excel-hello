テンプレ
http://www.bing.com/ を使って、ＷＰＯＳＴ指示書の書き方を説明する。
これは単なる説明書でなく、そのまま実行できる生きた指示書だ。

指示書のデフォルトは shift_jis (ANSI) だが、
他の文字コードで書いてもいい。
ただし、コマンドラインでエンコードを明記する必要がある。

jis 外の文字を post で送信したければ、
utf-8 か unicode を使うしかない。


!ブロック名
!キーワード!値
!キーワード!値

上の５行が、ブロックを書く基本ルール。
ブロック前後には空行を入れるので、合計５行。
ブロック名と値では不要なブランクを入れると誤作動する。
キーワードは前後のブランクを読み飛ばすので、
縦位置を揃える書き方ができる。

次の　ＷＰＯＳＴ　というブロックは指示開始を意味する。
上のように全角にすると指示とみなされない。
指示開始より上に書いたものはすべて無視される。

また、理解できない記述も無視される。
日本語はほとんど理解できないのでコメント書き放題。
ただし、ブロックは連続している必要があるので、
ブロック内に理解不能なものを入れると誤作動の恐れあり。

!wpost
!

指示開始ブロックは、
指示書で使う、行頭記号と改行記号を定義している。

これで、行頭記号が ! で、改行記号が vbCrLf だと宣言された。


!misc
!temp-folder!C:\tmp\bing
!temp-name!tempbing

作業用の一時ファイルの置き場所とファイル名の一部を指示している。
temp-name は省略すれば temp となるので、通常はわざわざ書かなくてよい。
個別にファイルを指定していく使い方もできるが、面倒なので、
temp-folder だけ指定して、あとは連番で作られるファイルを使うのが楽。


!request
!    url !http://www.bing.com/
! method !GET

読み先の URL と、メソッドを指示する。
省略すると GETなので、実際には URL だけでよい。


!action
!submit!

実際に読みにいく。
action ブロックがリアルに実行を行う。
これより前の他のブロックが実行条件を決めている。

これにより、
C:\tmp\bing\w_1_tempbing.txt というファイルに
http://www.bing.com/ がそのまま保存される。
これが、バイナリファイルダウンロードの基本形だ。
html テキストだけでなく、画像ファイルもこれで ok

!request
!    url !http://www.bing.com/favicon.ico

!action
!submit!

これは w_2_tempbing.txt を保存するが、テキストではない。
拡張子を ico に変えるとアイコンファイルだとわかる。


!request
!    url !http://www.bing.com/
!charset !utf-8

!output
!text!

!action
!submit!

output で、テキスト読み込みを指示する。
これにより、 charset 指示が有効になる。
charset を省略すれば自動判定なので、 output text だけでよい。

この結果は w_3_tempbing.txt に保存される。
w_1_* と比較すれば、同じ内容のテキストが別エンコード保存されているはず。
w_1_* は utf-8
w_3_* は unicode

このシステムでは、テキストの標準エンコードを unicode にしている。


!header
! Referer !http://cowares.nobody.jp/license/

!action
!submit!

header ブロックに入れたものはすべて、
リクエストヘッダとして使われる。
上の結果は w_4_* にテキストとして保存される。
明確に消さない限り、過去の指示が有効なので、
前の url も、text 指示も生きている。

ちなみに Referer は自動更新で、直前の URL が使われる。


!request
!    url !http://www.bing.com/search

!data
!q!ぬこ　肉球

!action
!submit!

これでビング検索結果が w_5_* に保存される。

これだけではつまらないので、
取得したページの html を解析してみる。

解析ルールは、ページごとに、やりたい目的ごとに必要なので、
すべて外部スクリプトとして自作しないといけない。
ここでは自作の手順とサンプルを示す。

まず、ここまでを実行して、保存できた w_5_* を使う。
スクリプトを作るのに必要な情報はここから得る。
また、スクリプトが完全に動くまでは、いちいちウェブに行かないで、
この w_5_* だけを相手にする。

スクリプトは、標準入力として html を受け、標準出力に結果を出すように作る。
ユニコードを使うため、 CScript //U オプションをつける。
また、標準出力にロゴを出さないよう、 //NoLogo オプションをつける。

また、オプション /url: でリクエストした url 名が得られる。
解析に必要なら情報として使える。

nop.vbs は、右から左に受け流すだけの何もしないスクリプトの見本。
no_lf.vbs は、改行とタブを取って１行にする見本。
title.vbs は、タイトルタグの中身を取り出す見本。
これらを参考にする。
title.vbs をコピーして改造するのが、たぶん簡単。

コマンドプロンプトで、
cscript //nologo //u title.vbs < C:\tmp\bing\w_5_tempbing.txt
実行結果は、
ぬこ　肉球 - Bing

まず、これを組み込んで動作させてみよう。


!action
!run!title.vbs

これは、直前の結果を title.vbs スクリプトに渡して、その出力を保存する。
w_6_* に、
ぬこ　肉球 - Bing
の１行が保存される。


次はページを単純にテキストとして読めるようにしてみよう。
plain_search_bing_com.vbs を作ってみた。
コマンドプロンプトで、
cscript //nologo //u plain_search_bing_com.vbs < C:\tmp\bing\w_5_tempbing.txt
実行結果が、単純に読めるテキストになった。
もう一度ページを読んでからスクリプトに通す。


!action
!submit!
!run!plain_search_bing_com.vbs

これが作った w_8_* はメモ帳で単純に開いて読める。


Microsoft Scripting Host の正規表現は貧弱で使いにくい。
そう思う人は、他のスクリプト言語が使える。

!action
!run-cmd!sort /REC 16384

これは w_8_* を、ウィンドウズ標準の SORT コマンドでソートし、
w_9_* に書き出す。

もっと正規表現がリッチなスクリプト言語、 Perl とか Ruby で、
この手のフィルタ処理を行うものを作れば、上のようにして実行できる。

run-cmd は run と違い、パスを自動付与しないので、
パスが通らないものはフルパス指定する。


Bing検索に戻る。
検索したページの先にあるものを取得してみよう。
さっきの plain_search_* を改造し、 href_search_* を作る。

!action
!submit!
!run!href_search_bing_com.vbs

w_11_* に検索結果の url が保存された。
ちょっと余分なのも混ざったが、気にしない。


この形のリストを作れば、一括してウェブから取得できる。

!input
!url-list!

!output
!clear!
!folder!C:\tmp\bing

!action
!clear!data
!submit!

input ブロックで、直前に作ったリストを読み込むように指示した。
output ブロックで、w_11_* みたいな作業ファイルでなく、
確定ファイルとして保存するように folder 指示を出した。
ここで指定したフォルダが保存先になって、連番＋拡張子つきの
ファイルが保存される。

1.text.html みたいな名前。

作業ファイルと違い、こいつは自動で上書きしない。
次々と連番を増やす。
また、拡張子は、 Content-Type になる。

output ブロックの clear は、過去に指定した項目を消す。
かなり前の、text 指定が生きているので、これを無効にする。
そうしないと、全部 Unicode 保存される。
html だけが来るなら問題ないが、画像などが来る場合もあるので、
text 指定を消しておかないとエラーになることがある。

action の clear data というのは、
data ブロックを全部消す。
ここで消さないと、巡回先すべてに
そのパラメータをつけたままリクエストしてしまう。


もっと本格的に検索してみる。

!input
!clear!

!output
!clear!
!text!


検索ページの、次ページなどへのリンクにマウスを置けば、
ページ制御の仕組みは予想がつく。

!request
!    url !http://www.bing.com/search

!data
!q!ぬこ　肉球
!first!11

!action
!submit!
!void!
!run!plain_search_bing_com.vbs

void が指定されると、その先、ブロックの終端までがコメントアウトされる。
よって plain_* は実行されなかった。

あらためてもう一度指示する。

!action
!run!plain_search_bing_com.vbs

これで w_13_* に、検索の２ページ目が確認できた。
もっと行ってみよう。

!data
!first!1

!action
!submit!
!run!plain_search_bing_com.vbs
!remove!nuco
!gather!nuco

!data
!first!11

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!21

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!31

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!41

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!51

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!61

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!71

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!81

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco

!data
!first!91

!action
!submit!
!run!plain_search_bing_com.vbs
!gather!nuco


これで、検索上位 100 件がまとめ読みできる。
w_nuco_* に結果がまとめられた。

最初の検索のときだけ、 w_nuco_* をクリアするために、
remove をつけている。
これをつけないで、次々と過去ファイルに追加書き込みすることもできる。

data のうち、検索ワードは変化しないので、
変化するページ指定（開始検索順位）だけ書けばいい。

スクリプトを差し替えて、
プレーンテキスト化でなく、リンク先一覧にすれば、
上位 100 件の一括ダウンロードもすぐ書ける。


画像を落としてみる。

!request
!    url !http://www.bing.com/images/search

!data
!q!ぬこ　肉球

!output
!temp!gazo_html

!action
!submit!
!clear!data
!run!li_images_search_bing_com.vbs

!input
!url-list!
!referer-clear!

!output
!clear!
!folder!C:\tmp\bing

!action
!submit!

これで、指定のフォルダに先頭ページの画像ファイルがまとめ保存される。
画像はページを動的に追加読み込みするので、
そいつの読み込みは、もうちょい調べないとできなさそうだ。

output に temp gazo_html として、w_gazo_html_* という
作業ファイルを使うよう指示している。
あとで参照したいファイルは、このように名前を明示するとよい。


input の referer-clear は、
referer を付けずにリクエストするオプション。
画像の場合、その方が拒否される率が低いようだ。



!end

end ブロックは、指示書の最後を意味し、
この先は何も読まない。
長い指示書を臨時に途中で中断するときに書き入れる。

end が無ければ、ファイルの最後まで実行する。


実行が終わると、ログファイルの保存先を示すポップアップが出る。
これが嫌で、沈黙させたいなら、
cscript //B で実行するか、
スクリプト先頭付近の WScript.Echo 部分を消せばいい。


拡張コマンド実行時に、コマンドプロンプトが開くのが
ちかちかして嫌なら、 Shell.Run で検索して出てくるあたりの引数 8 を
他のものにすればいい。

どの数字にすればよいかは、 WshShell.Run とかでウェブ検索すれば出てくる。


ここの例では使う機会が無かったが、
POST で textarea 向けの複数行テキストを送信するときは、こう書く。

!data
!comment◆
１行目
２行目
３行目
◆

◆はエスケープ記号で、上の記述は次のように解釈される。

!data
!comment!１行目[改行]２行目[改行]３行目[改行]

たまたま◆をエスケープ記号に使ったが、
これは自由に（本文中に出てこない文字を）選べる。

キーワードに使える文字種は限られているので、
キーワードの直後に、 7 bit ascii 以外の文字が出てくれば、
それをエスケープ記号として処理する。

!data
!comment脱
１行目
２行目
３行目
脱

このように漢字を使ってもいい。

!data
!comment目
１行目
２行目
３行目
目

エスケープの終わりは、エスケープ記号が単独で出たときだ。
上は成功するが、次のは失敗する。

!data
!comment目
１行
目
２行目
３行目
目

