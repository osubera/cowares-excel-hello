'class
'  name;T1StringStream
'{{{
Option Explicit

Const ABOUT_THIS_CLASS = "Tier 1 string stream"

' designed for IStreamBase revision r191+

Private Helper As StreamBaseHelper

Private T1 As Collection
Const DEFAULT_LINE_FEED = vbCrLf
Private LF As String
Private Append As Boolean

Implements IStreamBase

'=== T1 implements for my own begin ===

Private Function OpenT1(ReadWrite As String, Args As Variant) As Boolean
    OpenT1 = True
    If Not Append Then Helper.ClearQueue
    
    If ReadWrite = "w" Then Exit Function
    
    ' read: take multiple Strings and push them into T1
    Dim Arg As Variant
    For Each Arg In Args
        Helper.Enqueue Helper.MakeQueueData(Arg, Len(Arg))
    Next
End Function

Private Function CloseT1(ReadWrite As String, out As Variant) As Boolean
    CloseT1 = True
    
    If ReadWrite = "r" Then Exit Function
    
    ' write: give a String result
    Dim i As Long
    out = ""
    For i = 1 To T1.Count
        out = out & Helper.DataQueueData(T1(i)) & LF
    Next
End Function

Private Function GetEnv(Key As String) As Variant
    Select Case Key
    Case "line-feed"
        GetEnv = LF
    Case "append"
        GetEnv = Append
    End Select
End Function

Private Sub SetEnv(Key As String, Value As Variant)
    Select Case Key
    Case "line-feed"
        LF = Value
    Case "append"
        Append = Value
    End Select
End Sub


'=== T1 implements for my own end ===
'=== T2 implements for my own begin ===

Public Function FilterT2(ReadWrite As String, Force As Boolean) As Boolean
    FilterT2 = True
    If Force Then Exit Function
    
End Function


'=== T2 implements for my own end ===
'=== event procedures begin ===

Private Sub Class_Initialize()
    Set Helper = New StreamBaseHelper
    Helper.SetCaller Me
    Helper.NameMe ABOUT_THIS_CLASS
    
    Set T1 = Helper.Que
    LF = DEFAULT_LINE_FEED
    Append = False
End Sub

Private Sub Class_Terminate()
    Set T1 = Nothing
    Set Helper = Nothing
End Sub

'=== event procedures end ===
'=== IStreamBase begin ===


' about this class

Public Property Get IStreamBase_AboutMe() As String
    IStreamBase_AboutMe = Helper.AboutMe
End Property

Public Sub IStreamBase_NameMe(Optional ByVal NewName As String = "")
    If NewName = "" Then NewName = ABOUT_THIS_CLASS
    Helper.NameMe NewName
End Sub

Public Property Get IStreamBase_Description(Optional ByVal Depth As Long = -1) As String
    IStreamBase_Description = Helper.Description(Depth)
End Property


' connect to neighbor Tiers

Public Function IStreamBase_InsertT1(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT1 = Helper.InsertT1(Tier)
End Function

Public Function IStreamBase_InsertT3(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT3 = Helper.InsertT3(Tier)
End Function

Public Function IStreamBase_ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT1 = Helper.ConnectT1(Tier)
End Function

Public Function IStreamBase_ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT3 = Helper.ConnectT3(Tier)
End Function

Public Function IStreamBase_SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT1 = Helper.SetT1(Tier)
End Function

Public Function IStreamBase_SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT3 = Helper.SetT3(Tier)
End Function

Public Function IStreamBase_HasT1() As Boolean
    IStreamBase_HasT1 = Helper.HasT1
End Function

Public Function IStreamBase_HasT3() As Boolean
    IStreamBase_HasT3 = Helper.HasT3
End Function

Public Function IStreamBase_IsMe(Tier As Object) As Boolean
    IStreamBase_IsMe = Helper.IsMe(Tier)
End Function


' status

Public Function IStreamBase_IsBusyT1(Optional ByVal Depth As Long = -1) As Boolean
    IStreamBase_IsBusyT1 = Helper.IsBusyT1(Depth)
End Function

Public Function IStreamBase_IsBusyT3(Optional ByVal Depth As Long = -1) As Boolean
    IStreamBase_IsBusyT3 = Helper.IsBusyT3(Depth)
End Function

Public Function IStreamBase_IsBusyT2() As Boolean
    IStreamBase_IsBusyT2 = Helper.IsBusyT2()
End Function

Public Sub IStreamBase_Request(Command As String)
    Helper.Request Command
End Sub


' finder

Public Function IStreamBase_SearchEndOfLineTx() As Boolean
    IStreamBase_SearchEndOfLineTx = Helper.SearchEndOfLineTx
End Function

Public Function IStreamBase_FlushEndOfLineTx() As Boolean
    IStreamBase_FlushEndOfLineTx = Helper.FlushEndOfLineTx
End Function

Public Function IStreamBase_FilterT2(ReadWrite As String, Force As Boolean) As Boolean
    IStreamBase_FilterT2 = FilterT2(ReadWrite, Force)
End Function


' open / close

Public Function IStreamBase_OpenTx(ReadWrite As String, Args As Variant) As Boolean
    IStreamBase_OpenTx = Helper.OpenTx(ReadWrite, Args)
    IStreamBase_OpenTx = OpenT1(ReadWrite, Args)
End Function

Public Function IStreamBase_CloseTx(ReadWrite As String, Arg As Variant) As Boolean
    IStreamBase_CloseTx = Helper.CloseTx(ReadWrite, Arg)
    IStreamBase_CloseTx = CloseT1(ReadWrite, Arg)
End Function


' reader

Public Function IStreamBase_ReadTx() As Boolean
    IStreamBase_ReadTx = Helper.ReadTx()
End Function

Public Function IStreamBase_SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_SkipLineTx = Helper.SkipLineTx(Repeat)
End Function


' writer

Public Function IStreamBase_WriteTx() As Boolean
    IStreamBase_WriteTx = Helper.WriteTx()
End Function

Public Function IStreamBase_FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_FeedLineTx = Helper.FeedLineTx(Repeat)
End Function


' cursor

Public Sub IStreamBase_SetPositionTx(Optional Position As Variant = Empty)
    Helper.SetPositionTx Position
End Sub

Public Function IStreamBase_GetPositionTx() As Variant
    IStreamBase_GetPositionTx = Helper.GetPositionTx
End Function


' queue

Public Property Get IStreamBase_Que() As Collection
    Set IStreamBase_Que = Helper.Que
End Property

Public Sub IStreamBase_Enqueue(Arg As Variant)
    Helper.Enqueue Arg
End Sub

Public Function IStreamBase_Dequeue() As Variant
    IStreamBase_Dequeue = Helper.Dequeue
End Function

Public Function IStreamBase_CheatQueue() As Variant
    IStreamBase_CheatQueue = Helper.CheatQueue
End Function

Public Sub IStreamBase_EditFirstQueue(Data As Variant)
    Helper.EditFirstQueue Data
End Sub

Public Sub IStreamBase_InsertBeforeFirstQueue(Arg As Variant)
    Helper.InsertBeforeFirstQueue Arg
End Sub

Public Function IStreamBase_IsEmptyQueue() As Boolean
    IStreamBase_IsEmptyQueue = Helper.IsEmptyQueue
End Function

Public Sub IStreamBase_ClearQueue()
    Helper.ClearQueue
End Sub


' logging

Public Sub IStreamBase_LogError(Optional Arg As Variant = Empty)
    Helper.LogError Arg
End Sub

Public Function IStreamBase_LogErrorTx(Optional ByVal Depth As Long = -1) As String
    IStreamBase_LogErrorTx = Helper.LogErrorTx(Depth)
End Function


' extentions

Public Property Get IStreamBase_Properties(Key As String) As Variant
    IStreamBase_Properties = GetEnv(Key)
End Property

Public Property Let IStreamBase_Properties(Key As String, Value As Variant)
    SetEnv Key, Value
End Property

Public Function IStreamBase_Execute(ParamArray Args() As Variant) As Variant

End Function


'=== IStreamBase end ===
'}}}


