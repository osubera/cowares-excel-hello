'class
'  name;IStreamBase
'{{{
Option Explicit

' Interface for Buffered Stream Base

' Tier 1 : at the lowest surface, depend on low level implements, optional
' Tier 2 : act a conversion of data in stream, filters, optional
' Tier 3 : at the highest surface, required

' data flow for stream reader
' media -> T1 -> T2 -> T2 -> T3 -> application

' data flow for stream writer
' application -> T3 -> T2 -> T2 -> T1 -> media

' this class defines internal interfaces
' for communications between neighboring Tiers.

' thus these methods are better to have narrower scopes,
' but vba cannot do this by design.


'class
'  name;IStreamBase

'identity
'      url;http://code.google.com/p/cowares-excel-hello/wiki/stream_base
'   status;beta
'   source;http://code.google.com/p/cowares-excel-hello/source/browse/trunk/stream_base/i_stream_base.txt
' revision;r191+


' about this class

Public Property Get AboutMe() As String
End Property

Public Sub NameMe(Optional ByVal NewName As String = "")
End Sub

Public Property Get Description(Optional ByVal Depth As Long = -1) As String
End Property


' connect to neighbor Tiers

Public Function InsertT1(Tier As IStreamBase) As IStreamBase
End Function

Public Function InsertT3(Tier As IStreamBase) As IStreamBase
End Function

Public Function ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function HasT1() As Boolean
End Function

Public Function HasT3() As Boolean
End Function

Public Function IsMe(Tier As Object) As Boolean
End Function


' status

Public Function IsBusyT1(Optional ByVal Depth As Long = -1) As Boolean
End Function

Public Function IsBusyT3(Optional ByVal Depth As Long = -1) As Boolean
End Function

Public Function IsBusyT2() As Boolean
End Function

Public Sub Request(Command As String)
End Sub


' finder

Public Function SearchEndOfLineTx() As Boolean
End Function

Public Function FlushEndOfLineTx() As Boolean
End Function

Public Function FilterT2(ReadWrite As String, Force As Boolean) As Boolean
End Function


' open / close

Public Function OpenTx(ReadWrite As String, Args As Variant) As Boolean
End Function

Public Function CloseTx(ReadWrite As String, Arg As Variant) As Boolean
End Function


' reader

Public Function ReadTx() As Boolean
End Function

Public Function SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
End Function


' writer

Public Function WriteTx() As Boolean
End Function

Public Function FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
End Function


' cursor

Public Sub SetPositionTx(Optional Position As Variant = Empty)
End Sub

Public Function GetPositionTx() As Variant
End Function


' queue

Public Property Get Que() As Collection
End Property

Public Sub Enqueue(Arg As Variant)
End Sub

Public Function Dequeue() As Variant
End Function

Public Function CheatQueue() As Variant
End Function

Public Sub EditFirstQueue(Data As Variant)
End Sub

Public Sub InsertBeforeFirstQueue(Arg As Variant)
End Sub

Public Function IsEmptyQueue() As Boolean
End Function

Public Sub ClearQueue()
End Sub


' logging

Public Sub LogError(Optional Arg As Variant = Empty)
End Sub

Public Function LogErrorTx(Optional ByVal Depth As Long = -1) As String
End Function


' extentions

Public Property Get Properties(Key As String) As Variant
End Property

Public Property Let Properties(Key As String, Value As Variant)
End Property

Public Function Execute(ParamArray Args() As Variant) As Variant
End Function

'}}}
