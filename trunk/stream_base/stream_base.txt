'workbook
'  name;stream_base.xls

'require

'worksheet
'  name;Sheet1


'class
'  name;IStreamBase
'{{{
Option Explicit

' Interface for Buffered Stream Base

' Tier 1 : at the lowest surface, depend on low level implements, optional
' Tier 2 : act a conversion of data in stream, filters, optional
' Tier 3 : at the highest surface, required

' data flow for stream reader
' media -> T1 -> T2 -> T2 -> T3 -> application

' data flow for stream writer
' application -> T3 -> T2 -> T2 -> T1 -> media

' this class defines internal interfaces
' for communications between neighboring Tiers.

' thus these methods are better to have narrower scopes,
' but vba cannot do this by design.


'class
'  name;IStreamBase

'identity
'      url;http://code.google.com/p/cowares-excel-hello/wiki/stream_base
'   status;beta
'   source;
' revision;0+


' about this class

Public Property Get AboutMe() As String
End Property

Public Sub NameMe(Optional ByVal NewName As String = "")
End Sub

Public Property Get Description() As String
End Property


' connect to neighbor Tiers

Public Function InsertT1(Tier As IStreamBase) As IStreamBase
End Function

Public Function InsertT3(Tier As IStreamBase) As IStreamBase
End Function

Public Function ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
End Function

Public Function HasT1() As Boolean
End Function

Public Function HasT3() As Boolean
End Function

Public Function IsMe(Tier As Object) As Boolean
End Function

' finder

Public Function SearchEndOfStreamTx() As Boolean
End Function

Public Function SearchEndOfLineTx() As Boolean
End Function


' open / close

Public Function OpenReadTx(Args As Variant) As Boolean
End Function

Public Function OpenWriteTx(Args As Variant) As Boolean
End Function

Public Function CloseReadTx(Arg As Variant) As Boolean
End Function

Public Function CloseWriteTx(Arg As Variant) As Boolean
End Function


' reader

Public Function ReadTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
End Function

Public Function SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
End Function


' writer

Public Function WriteTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
End Function

Public Function FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
End Function


' cursor

Public Sub SetPositionTx(Optional ByVal Position As Long = 0)
End Sub

Public Function GetPositionTx() As Long
End Function


' queue

Public Property Get Que() As Collection
End Property

Public Sub Enqueue(ParamArray Args() As Variant)
End Sub

Public Function Dequeue() As Variant
End Function

Public Function CheatQueue() As Variant
End Function

Public Sub EditFirstQueue(Data As Variant)
End Sub

Public Sub InsertBeforeFirstQueue(ParamArray Args() As Variant)
End Sub

Public Function IsEmptyQueue() As Boolean
End Function

Public Sub ClearQueue()
End Sub


' status and logging

Public Function IsBusy() As Boolean
End Function

Public Sub LogError(Optional Arg As Variant = Empty)
End Sub

Public Function LogErrorTx() As String
End Function

'}}}

'class
'  name;StreamBaseHelper
'{{{
Option Explicit

' Stream Base Helper

' this class contains implements and utility functions
' commonly used in stream base classes.

' designed for IStreamBase revision 0+


Private oT2 As IStreamBase  ' caller
Private oT1 As IStreamBase
Private oT3 As IStreamBase

Private T2 As Collection
Private MyDescription As String


'=== event procedures begin ===

Private Sub Class_Initialize()
    Set T2 = New Collection
End Sub

Private Sub Class_Terminate()
    Set oT3 = Nothing
    Set oT1 = Nothing
    Set oT2 = Nothing
    Set T2 = Nothing
End Sub


'=== event procedures end ===
'=== connet to caller begin ===


' know who owns me

Public Function GetCaller() As IStreamBase
    Set GetCaller = oT2
End Function

Public Sub SetCaller(Who As IStreamBase)
    Set oT2 = Who
    Set oT1 = Who
    Set oT3 = Who
End Sub


'=== connet to caller end ===
'=== common implements begin ===


' about this class

Public Property Get AboutMe() As String
    AboutMe = MyDescription
End Property

Public Sub NameMe(NewName As String)
    MyDescription = NewName
End Sub

Public Property Get Description() As String
    Dim out As String
    out = AboutMe
    If HasT1 Then out = out & " : " & oT1.Description
    Description = out
End Property


' manage connections to neighbor Tiers

Public Function InsertT1(Tier As IStreamBase) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2b.InsertT1(Tier)
    ' after:  T1 - T2a - Tier - T2b - T3
    ' return T2a or nothing
    
    Dim Prev As IStreamBase
    
    Set Prev = ConnectT1(Tier)
    If Prev Is Nothing Then Exit Function
    
    Prev.ConnectT3 Tier
    Set InsertT1 = Prev
End Function

Public Function InsertT3(Tier As IStreamBase) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2a.InsertT3(Tier)
    ' after:  T1 - T2a - Tier - T2b - T3
    ' return T2b or nothing
    
    Dim Prev As IStreamBase
    
    Set Prev = ConnectT3(Tier)
    If Prev Is Nothing Then Exit Function
    
    Prev.ConnectT1 Tier
    Set InsertT3 = Prev
End Function

Public Function ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2b.ConnectT1(Tier)
    ' after:  Tier - T2b - T3
    '        change both side of T2b and Tier
    ' return T2a or nothing
    
    Dim Prev As IStreamBase
    
    Set Prev = SetT1(Tier)
    If Not Prev Is Nothing Then Prev.SetT3
    If Not Tier Is Nothing Then Tier.SetT3 oT2
    Set ConnectT1 = Prev
End Function

Public Function ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2a.SetT3(Tier)
    ' after:  T1 - T2a - Tier
    '        change both side of T2a and Tier
    ' return T2b or nothing
    
    Dim Prev As IStreamBase
    
    Set Prev = SetT3(Tier)
    If Not Prev Is Nothing Then Prev.SetT1
    If Not Tier Is Nothing Then Tier.SetT1 oT2
    Set ConnectT3 = Prev
End Function

Public Function SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2b.SetT1(Tier)
    ' after:  (Tier) - T2b - T3
    '        change only T2b side, no changes to Tier side
    ' return T2a or nothing

    If HasT1 Then Set SetT1 = oT1
    If Tier Is Nothing Then
        Set oT1 = oT2
    Else
        Set oT1 = Tier
    End If
End Function

Public Function SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    ' before: T1 - T2a - T2b -T3
    ' call T2a.SetT3(Tier)
    ' after:  T1 - T2a - (Tier)
    '        change only T2a side, no changes to Tier side
    ' return T2b or nothing
    
    If HasT3 Then Set SetT3 = oT3
    If Tier Is Nothing Then
        Set oT3 = oT2
    Else
        Set oT3 = Tier
    End If
End Function

Public Function HasT1() As Boolean
    HasT1 = Not IsMe(oT1)
End Function

Public Function HasT3() As Boolean
    HasT3 = Not IsMe(oT3)
End Function

Public Function IsMe(Tier As Object) As Boolean
    IsMe = (Tier Is oT2)
End Function


' finder

Public Function SearchEndOfStreamTx() As Boolean
    Dim Found As Boolean
    
    Found = SearchEndOfStreamT2
    If Not Found Then GoTo DONE
    If Not HasT1 Then GoTo DONE
    Found = oT1.SearchEndOfStreamTx
DONE:
    SearchEndOfStreamTx = Found
End Function

Public Function SearchEndOfLineTx() As Boolean
    Dim Found As Boolean
    
    Found = SearchEndOfLineT2
    If Found Then GoTo DONE
    If Not HasT1 Then GoTo DONE
    Found = oT1.SearchEndOfLineTx
DONE:
    SearchEndOfLineTx = Found
End Function


' open / close

Public Function OpenReadTx(Args As Variant) As Boolean
    If HasT1 Then
        OpenReadTx = oT1.OpenReadTx(Args)
    Else
        OpenReadTx = True
    End If
End Function

Public Function OpenWriteTx(Args As Variant) As Boolean
    If HasT1 Then
        OpenWriteTx = oT1.OpenWriteTx(Args)
    Else
        OpenWriteTx = True
    End If
End Function

Public Function CloseReadTx(Arg As Variant) As Boolean
    If HasT1 Then
        CloseReadTx = oT1.CloseReadTx(Arg)
    Else
        CloseReadTx = True
    End If
End Function

Public Function CloseWriteTx(Arg As Variant) As Boolean
    If HasT1 Then
        CloseWriteTx = oT1.CloseWriteTx(Arg)
    Else
        CloseWriteTx = True
    End If
End Function


' reader

Public Function ReadTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
    If HasT1 Then
        ReadTx = oT1.ReadTx(Data, Size)
    Else
        ReadTx = True
    End If
End Function

Public Function SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    If HasT1 Then
        SkipLineTx = oT1.SkipLineTx(Repeat)
    Else
        SkipLineTx = True
    End If
End Function


' writer

Public Function WriteTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
    If HasT1 Then
        WriteTx = oT1.WriteTx(Data, Size)
    Else
        WriteTx = True
    End If
End Function

Public Function FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    If HasT1 Then
        FeedLineTx = oT1.FeedLineTx(Repeat)
    Else
        FeedLineTx = True
    End If
End Function


' cursor

Public Sub SetPositionTx(Optional ByVal Position As Long = 0)
    If HasT1 Then
        oT1.SetPositionTx Position
    Else
        SetPositionT1 Position
    End If
End Sub

Public Function GetPositionTx() As Long
    If HasT1 Then
        GetPositionTx = oT1.GetPositionTx
    Else
        GetPositionTx = GetPositionT1
    End If
End Function


' queue

Public Property Get Que() As Collection
    Set Que = T2
End Property

Public Sub Enqueue(Args As Variant)
    Dim Arg As Variant
    For Each Arg In Args
        T2.Add Arg
    Next
End Sub

Public Function Dequeue() As Variant
    Dequeue = T2(1)
    T2.Remove 1
End Function

Public Function CheatQueue() As Variant
    CheatQueue = T2(1)
End Function

Public Sub EditFirstQueue(Data As Variant)
    T2.Add Data, After:=1
    T2.Remove 1
End Sub

Public Sub InsertBeforeFirstQueue(Args As Variant)
    Dim Arg As Variant
    For Each Arg In Args
        T2.Add Arg, Before:=1
    Next
End Sub

Public Function IsEmptyQueue() As Boolean
    IsEmptyQueue = (T2.Count = 0)
End Function

Public Sub ClearQueue()
    Do While T2.Count > 0
        T2.Remove 1
    Loop
End Sub


' status and logging

Public Function IsBusy() As Boolean
    Dim out As Boolean
    
    out = IsBusyT2
    If out Then GoTo DONE
    If Not HasT1 Then GoTo DONE
    out = oT1.IsBusy
DONE:
    IsBusy = out
End Function

Public Sub LogError(Optional Arg As Variant = Empty)
    If HasT3 Then
        oT3.LogError Arg
    Else
        LogErrorT3 Arg
    End If
End Sub

Public Function LogErrorTx() As String
    Dim out As String
    out = T2.Count & EncVariant(T2)
    If HasT1 Then out = out & " : " & oT1.LogErrorTx
    LogErrorTx = out
End Function


'=== common implements end ===
'=== T1 implements begin ===


Public Sub SetPositionT1(ByVal Position As Long)

End Sub

Public Function GetPositionT1() As Long
    GetPositionT1 = -1
End Function


'=== T1 implements end ===
'=== T2 implements begin ===


' finder

Public Function SearchEndOfStreamT2() As Boolean
    SearchEndOfStreamT2 = IsEmptyQueue
End Function

Public Function SearchEndOfLineT2() As Boolean
    SearchEndOfLineT2 = SearchEndOfStreamT2
End Function


' status and logging

Public Function IsBusyT2() As Boolean
    IsBusyT2 = Not IsEmptyQueue
End Function


'=== T2 implements end ===
'=== T3 implements begin ===


' status and logging

Public Function LogErrorT3(Arg As Variant)
    'Logs.Add Array(Err.Number, Err.Description, LogErrorTx, Arg)
    Debug.Print EncVariant(Array(Err.Number, Err.Description, LogErrorTx, Arg))
End Function


'=== T3 implements end ===
'=== data structure begin ===


' queue data structure

Public Function MakeQueueData(Optional Data As Variant = Empty, Optional ByVal Size As Long = -1) As Variant
    If IsEmpty(Data) Then
        MakeQueueData = Array(Size, Empty)
    Else
        MakeQueueData = Array(Size, Array(Data, Empty))
    End If
End Function

Public Function SizeQueueData(QueueData As Variant) As Long
    SizeQueueData = QueueData(0)
End Function

Public Function NoDataQueueData(QueueData As Variant) As Boolean
    NoDataQueueData = IsEmpty(QueueData(1))
End Function

Public Function DataQueueData(QueueData As Variant) As Variant
    If NoDataQueueData(QueueData) Then Exit Function
    DataQueueData = QueueData(1)(0)
End Function

Public Function EditDataQueueData(QueueData As Variant, Optional Data As Variant = Empty) As Variant
    EditDataQueueData = MakeQueueData(Data, SizeQueueData(QueueData))
End Function

Public Function EditSizeQueueData(QueueData As Variant, Optional ByVal Size As Long = -1) As Variant
    EditSizeQueueData = MakeQueueData(DataQueueData(QueueData), Size)
End Function


'=== data structure end ===
'=== helper functions begin ===


Public Function EncVariant(Data As Variant) As String
    Dim KeyValue As Variant
    Dim out As String
    
    Const ArrayBegin = "("
    Const ArrayEnd = ")"
    Const Delimiter = ","
    
    If IsArray(Data) Then
        out = ArrayBegin
        For Each KeyValue In Data
            out = out & EncVariant(KeyValue) & Delimiter
        Next
        out = out & ArrayEnd
    ElseIf IsObject(Data) Then
        Select Case TypeName(Data)
        Case "Collection"
            out = EncCollection(Data)
        Case "Dictionary"
            out = EncDictionary(Data)
        Case Else
            out = TypeName(Data)
        End Select
    Else
        out = CStr(Data)
    End If
    
    EncVariant = out
End Function

Public Function EncDictionary(Data As Variant) As String
    Dim Key As Variant
    Dim out As String
    
    Const LineFeed = "##"
    Const Equal = "="
    
    out = LineFeed
    For Each Key In Data.Keys
        out = out & Key & Equal & EncVariant(Data(Key)) & LineFeed
    Next
    
    EncDictionary = out
End Function

Public Function EncCollection(Data As Variant) As String
    Dim x As Variant
    Dim out As String
    
    Const LineFeed = "##"
    
    out = LineFeed
    For Each x In Data
        out = out & EncVariant(x) & LineFeed
    Next
    
    EncCollection = out
End Function

'=== helper functions end ===
'}}}

'class
'  name;T2
'{{{
Option Explicit

Const ABOUT_THIS_CLASS = "Tier 2 interface tester"

' designed for IStreamBase revision 0+

Private Helper As StreamBaseHelper

Implements IStreamBase

'=== T2 implements for my own begin ===

'=== T2 implements for my own end ===
'=== event procedures begin ===

Private Sub Class_Initialize()
    Set Helper = New StreamBaseHelper
    Helper.SetCaller Me
    Helper.NameMe ABOUT_THIS_CLASS
End Sub

Private Sub Class_Terminate()
    Set Helper = Nothing
End Sub

'=== event procedures end ===
'=== IStreamBase begin ===


' about this class

Public Property Get IStreamBase_AboutMe() As String
    IStreamBase_AboutMe = Helper.AboutMe
End Property

Public Sub IStreamBase_NameMe(Optional ByVal NewName As String = "")
    If NewName = "" Then NewName = ABOUT_THIS_CLASS
    Helper.NameMe NewName
End Sub

Public Property Get IStreamBase_Description() As String
    IStreamBase_Description = Helper.Description
End Property


' connect to neighbor Tiers

Public Function IStreamBase_InsertT1(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT1 = Helper.InsertT1(Tier)
End Function

Public Function IStreamBase_InsertT3(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT3 = Helper.InsertT3(Tier)
End Function

Public Function IStreamBase_ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT1 = Helper.ConnectT1(Tier)
End Function

Public Function IStreamBase_ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT3 = Helper.ConnectT3(Tier)
End Function

Public Function IStreamBase_SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT1 = Helper.SetT1(Tier)
End Function

Public Function IStreamBase_SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT3 = Helper.SetT3(Tier)
End Function

Public Function IStreamBase_HasT1() As Boolean
    IStreamBase_HasT1 = Helper.HasT1
End Function

Public Function IStreamBase_HasT3() As Boolean
    IStreamBase_HasT3 = Helper.HasT3
End Function

Public Function IStreamBase_IsMe(Tier As Object) As Boolean
    IStreamBase_IsMe = Helper.IsMe(Tier)
End Function


' finder

Public Function IStreamBase_SearchEndOfStreamTx() As Boolean
    IStreamBase_SearchEndOfStreamTx = Helper.SearchEndOfStreamTx
End Function

Public Function IStreamBase_SearchEndOfLineTx() As Boolean
    IStreamBase_SearchEndOfLineTx = Helper.SearchEndOfLineTx
End Function


' open / close

Public Function IStreamBase_OpenReadTx(Args As Variant) As Boolean
    IStreamBase_OpenReadTx = Helper.OpenReadTx(Args)
End Function

Public Function IStreamBase_OpenWriteTx(Args As Variant) As Boolean
    IStreamBase_OpenWriteTx = Helper.OpenWriteTx(Args)
End Function

Public Function IStreamBase_CloseReadTx(Arg As Variant) As Boolean
    IStreamBase_CloseReadTx = Helper.CloseReadTx(Arg)
End Function

Public Function IStreamBase_CloseWriteTx(Arg As Variant) As Boolean
    IStreamBase_CloseWriteTx = Helper.CloseWriteTx(Arg)
End Function


' reader

Public Function IStreamBase_ReadTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
    IStreamBase_ReadTx = Helper.ReadTx(Data, Size)
End Function

Public Function IStreamBase_SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_SkipLineTx = Helper.SkipLineTx(Repeat)
End Function


' writer

Public Function IStreamBase_WriteTx(ByRef Data As Variant, ByRef Size As Variant) As Boolean
    IStreamBase_WriteTx = Helper.WriteTx(Data, Size)
End Function

Public Function IStreamBase_FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_FeedLineTx = Helper.FeedLineTx(Repeat)
End Function


' cursor

Public Sub IStreamBase_SetPositionTx(Optional ByVal Position As Long = 0)
    Helper.SetPositionTx (Position)
End Sub

Public Function IStreamBase_GetPositionTx() As Long
    IStreamBase_GetPositionTx = Helper.GetPositionTx
End Function


' queue

Public Property Get IStreamBase_Que() As Collection
    Set IStreamBase_Que = Helper.Que
End Property

Public Sub IStreamBase_Enqueue(ParamArray Args() As Variant)
    Helper.Enqueue CVar(Args)
End Sub

Public Function IStreamBase_Dequeue() As Variant
    IStreamBase_Dequeue = Helper.Dequeue
End Function

Public Function IStreamBase_CheatQueue() As Variant
    IStreamBase_CheatQueue = Helper.CheatQueue
End Function

Public Sub IStreamBase_EditFirstQueue(Data As Variant)
    Helper.EditFirstQueue Data
End Sub

Public Sub IStreamBase_InsertBeforeFirstQueue(ParamArray Args() As Variant)
    Helper.InsertBeforeFirstQueue CVar(Args)
End Sub

Public Function IStreamBase_IsEmptyQueue() As Boolean
    IStreamBase_IsEmptyQueue = Helper.IsEmptyQueue
End Function

Public Sub IStreamBase_ClearQueue()
    Helper.ClearQueue
End Sub


' status and logging

Public Function IStreamBase_IsBusy() As Boolean
    IStreamBase_IsBusy = Helper.IsBusy
End Function

Public Sub IStreamBase_LogError(Optional Arg As Variant = Empty)
    Helper.LogError Arg
End Sub

Public Function IStreamBase_LogErrorTx() As String
    IStreamBase_LogErrorTx = Helper.LogErrorTx
End Function


'=== IStreamBase end ===
'}}}

'module
'  name;testStreamBaseHelper
'{{{
Option Explicit

Sub test_ALL()
    test_Can_Initialize_Helper
    test_Can_Initialize_T2
    test_Description
    test_Connections
    test_Finder
    test_Read_Write
    test_Que
    test_Log
    test_Que_Data_Structure
End Sub

Sub test_Can_Initialize_Helper()
    Dim x As StreamBaseHelper
    Set x = New StreamBaseHelper
    
    Debug.Assert TypeName(x) = "StreamBaseHelper"
    
    Debug.Print x.EncVariant(Array("OK", x))
    Set x = Nothing
End Sub

Sub test_Can_Initialize_T2()
    Dim x As IStreamBase
    Dim y As T2
    Set x = New T2
    Set y = New T2
    
    Debug.Assert TypeName(x) = "T2"
    Debug.Assert TypeName(y) = "T2"
    
    Set y = Nothing
    Set x = Nothing
End Sub

Sub test_Description()
    Dim x As IStreamBase
    Set x = New T2
    
    Debug.Print x.AboutMe
    Debug.Print x.Description
    
    x.NameMe "Hello"
    Debug.Assert x.AboutMe = "Hello"
    Debug.Print x.AboutMe
    Debug.Print x.Description
    
    x.NameMe
    Debug.Print x.AboutMe
    Debug.Print x.Description
    
    Set x = Nothing
End Sub

Sub test_Connections()
    Dim x1 As IStreamBase
    Dim x2 As IStreamBase
    Dim x3 As IStreamBase
    Set x1 = New T2
    Set x2 = New T2
    Set x3 = New T2
    
    x1.NameMe "x1"
    x2.NameMe "x2"
    x3.NameMe "x3"
    
    Debug.Assert Not x2.IsMe(x1)
    Debug.Assert x2.IsMe(x2)
    Debug.Assert Not x2.IsMe(x3)
    
    Debug.Print x2.Description
    Debug.Assert Not x2.HasT1
    Debug.Assert Not x2.HasT3
    
    x2.SetT1 x1
    Debug.Print x2.Description
    Debug.Assert x2.HasT1
    Debug.Assert Not x2.HasT3
    Debug.Assert Not x1.HasT3
    
    x2.SetT1
    x2.SetT3 x3
    Debug.Print x2.Description
    Debug.Assert x2.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert Not x1.HasT3
    Debug.Assert Not x3.HasT1
    
    x2.SetT1 x1
    Debug.Print x2.Description
    Debug.Assert x2.HasT3
    Debug.Assert x2.HasT1
    Debug.Assert Not x1.HasT3
    Debug.Assert Not x3.HasT1
    Debug.Assert Not x1.HasT1
    Debug.Assert Not x3.HasT3
    
    Debug.Assert x2.SetT1 Is x1
    Debug.Assert x2.SetT3 Is x3
    Debug.Print x2.Description
    Debug.Assert Not x2.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert Not x1.HasT3
    Debug.Assert Not x3.HasT1
    
    x2.ConnectT1 x1
    Debug.Print x2.Description
    Debug.Assert x2.HasT1
    Debug.Assert Not x2.HasT3
    Debug.Assert x1.HasT3
    
    x2.ConnectT1
    x2.ConnectT3 x3
    Debug.Print x3.Description
    Debug.Assert x2.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert Not x1.HasT3
    Debug.Assert x3.HasT1
    
    x2.ConnectT1 x1
    Debug.Print x3.Description
    Debug.Assert x2.HasT3
    Debug.Assert x2.HasT1
    Debug.Assert x1.HasT3
    Debug.Assert x3.HasT1
    Debug.Assert Not x1.HasT1
    Debug.Assert Not x3.HasT3
    
    Debug.Assert x2.ConnectT1 Is x1
    Debug.Assert x2.ConnectT3 Is x3
    Debug.Print x3.Description
    Debug.Assert Not x2.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert Not x1.HasT3
    Debug.Assert Not x3.HasT1
    
    x2.ConnectT3 x3
    x2.ConnectT3 x1
    Debug.Print x3.Description
    Debug.Print x1.Description
    Debug.Assert Not x3.HasT1
    Debug.Assert Not x3.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert x2.HasT3
    Debug.Assert x1.HasT1
    Debug.Assert Not x1.HasT3
    
    x2.ConnectT3
    
    x3.ConnectT1 x1
    Debug.Print x3.Description
    
    x3.InsertT1 x2
    Debug.Print x3.Description
    Debug.Assert Not x3.HasT3
    Debug.Assert x3.HasT1
    Debug.Assert x2.HasT3
    Debug.Assert x2.HasT1
    Debug.Assert x1.HasT3
    Debug.Assert Not x1.HasT1
    
    x2.ConnectT1
    x2.ConnectT3
    
    x1.ConnectT3 x3
    Debug.Print x3.Description
    
    x1.InsertT3 x2
    Debug.Print x3.Description
    Debug.Assert Not x3.HasT3
    Debug.Assert x3.HasT1
    Debug.Assert x2.HasT3
    Debug.Assert x2.HasT1
    Debug.Assert x1.HasT3
    Debug.Assert Not x1.HasT1
    
    x2.ConnectT1
    x2.ConnectT3
    
    x1.ConnectT3 x3
    Debug.Print x3.Description
    
    x1.InsertT1 x2
    Debug.Print x3.Description
    Debug.Assert Not x3.HasT3
    Debug.Assert x3.HasT1
    Debug.Assert x2.HasT3
    Debug.Assert Not x2.HasT1
    Debug.Assert x1.HasT3
    Debug.Assert x1.HasT1
    
    Set x3 = Nothing
    Set x2 = Nothing
    Set x1 = Nothing
End Sub

Sub test_Finder()
    Dim x1 As IStreamBase
    Dim x2 As IStreamBase
    Dim x3 As IStreamBase
    Set x1 = New T2
    Set x2 = New T2
    Set x3 = New T2
    x1.NameMe "x1"
    x2.NameMe "x2"
    x3.NameMe "x3"
    x3.ConnectT1 x2
    x2.ConnectT1 x1
    
    Debug.Print x3.Description
    
    Debug.Assert x3.IsEmptyQueue
    Debug.Assert x2.IsEmptyQueue
    Debug.Assert x1.IsEmptyQueue
    Debug.Assert Not x3.IsBusy
    Debug.Assert Not x2.IsBusy
    Debug.Assert Not x1.IsBusy
    Debug.Assert x3.SearchEndOfStreamTx
    Debug.Assert x2.SearchEndOfStreamTx
    Debug.Assert x1.SearchEndOfStreamTx
    Debug.Assert x3.SearchEndOfLineTx
    Debug.Assert x2.SearchEndOfLineTx
    Debug.Assert x1.SearchEndOfLineTx
    
    x3.Que.Add "dummy"
    Debug.Assert Not x3.IsEmptyQueue
    Debug.Assert x3.IsBusy
    Debug.Assert Not x3.SearchEndOfStreamTx
    Debug.Assert x3.SearchEndOfLineTx
    
    x3.Que.Remove 1
    Debug.Assert x3.IsEmptyQueue
    Debug.Assert Not x3.IsBusy
    Debug.Assert x3.SearchEndOfStreamTx
    Debug.Assert x3.SearchEndOfLineTx
    
    x2.Que.Add "dummy"
    Debug.Assert Not x2.IsEmptyQueue
    Debug.Assert x3.IsBusy
    Debug.Assert x2.IsBusy
    Debug.Assert Not x3.SearchEndOfStreamTx
    Debug.Assert Not x2.SearchEndOfStreamTx
    Debug.Assert x3.SearchEndOfLineTx
    Debug.Assert x2.SearchEndOfLineTx
    
    x2.Que.Remove 1
    x1.Que.Add "dummy"
    Debug.Assert Not x1.IsEmptyQueue
    Debug.Assert x3.IsBusy
    Debug.Assert x2.IsBusy
    Debug.Assert x1.IsBusy
    Debug.Assert Not x3.SearchEndOfStreamTx
    Debug.Assert Not x2.SearchEndOfStreamTx
    Debug.Assert Not x1.SearchEndOfStreamTx
    Debug.Assert x3.SearchEndOfLineTx
    Debug.Assert x2.SearchEndOfLineTx
    Debug.Assert Not x1.SearchEndOfLineTx
    
    Set x3 = Nothing
    Set x2 = Nothing
    Set x1 = Nothing
End Sub

Sub test_Read_Write()
    Dim x1 As IStreamBase
    Dim x2 As IStreamBase
    Dim x3 As IStreamBase
    Set x1 = New T2
    Set x2 = New T2
    Set x3 = New T2
    x1.NameMe "x1"
    x2.NameMe "x2"
    x3.NameMe "x3"
    x3.ConnectT1 x2
    x2.ConnectT1 x1
    
    Debug.Print x3.Description
    
    Debug.Assert x3.OpenReadTx(Array())
    Debug.Assert x3.OpenWriteTx(Array())
    Debug.Assert x3.CloseReadTx("dummy")
    Debug.Assert x3.CloseWriteTx("dummy")
    Debug.Assert x3.ReadTx(Empty, 0)
    Debug.Assert x3.SkipLineTx
    Debug.Assert x3.WriteTx(Empty, 0)
    Debug.Assert x3.FeedLineTx
    x3.SetPositionTx 0
    Debug.Assert x3.GetPositionTx() = -1
    
    Set x3 = Nothing
    Set x2 = Nothing
    Set x1 = Nothing
End Sub

Sub test_Que()
    Dim x1 As IStreamBase
    Dim x2 As IStreamBase
    Dim x3 As IStreamBase
    Set x1 = New T2
    Set x2 = New T2
    Set x3 = New T2
    x1.NameMe "x1"
    x2.NameMe "x2"
    x3.NameMe "x3"
    x3.ConnectT1 x2
    x2.ConnectT1 x1
    
    Debug.Print x3.Description
    
    Debug.Assert TypeName(x3.Que) = "Collection"
    Debug.Assert x3.IsEmptyQueue
    x3.Enqueue 1, 2, 3
    Debug.Assert Not x3.IsEmptyQueue
    Debug.Assert x3.Dequeue = 1
    Debug.Assert x3.CheatQueue = 2
    x3.EditFirstQueue 4
    Debug.Assert x3.Dequeue = 4
    Debug.Assert x3.CheatQueue = 3
    x3.InsertBeforeFirstQueue 11, 12
    Debug.Assert x3.Dequeue = 12
    Debug.Assert x3.Dequeue = 11
    Debug.Assert x3.Dequeue = 3
    Debug.Assert x3.IsEmptyQueue
    x3.Enqueue 21, 22, 23
    Debug.Assert Not x3.IsEmptyQueue
    x3.ClearQueue
    Debug.Assert x3.IsEmptyQueue
    
    Set x3 = Nothing
    Set x2 = Nothing
    Set x1 = Nothing
End Sub

Sub test_Log()
    Dim x1 As IStreamBase
    Dim x2 As IStreamBase
    Dim x3 As IStreamBase
    Set x1 = New T2
    Set x2 = New T2
    Set x3 = New T2
    x1.NameMe "x1"
    x2.NameMe "x2"
    x3.NameMe "x3"
    x3.ConnectT1 x2
    x2.ConnectT1 x1
    
    Debug.Print x3.Description
    
    Debug.Print x3.LogErrorTx
    x3.LogError "Hello"
    
    On Error Resume Next
    Dim i As Long
    i = 1 / 0
    x3.LogError "World"
    
    Set x3 = Nothing
    Set x2 = Nothing
    Set x1 = Nothing
End Sub

Sub test_Que_Data_Structure()
    Dim Q As Variant
    Dim Data As Variant
    Dim Size As Long
    Dim Helper As StreamBaseHelper
    Set Helper = New StreamBaseHelper
    
    Data = "Hello World"
    Size = 1234
    
    Q = Helper.MakeQueueData()
    Debug.Print Helper.EncVariant(Q)
    Debug.Assert Helper.SizeQueueData(Q) = -1
    Debug.Assert Helper.NoDataQueueData(Q)
    Debug.Assert IsEmpty(Helper.DataQueueData(Q))
    
    Q = Helper.MakeQueueData(Size:=Size)
    Debug.Print Helper.EncVariant(Q)
    Debug.Assert Helper.SizeQueueData(Q) = Size
    Debug.Assert Helper.NoDataQueueData(Q)
    Debug.Assert IsEmpty(Helper.DataQueueData(Q))
    
    Q = Helper.MakeQueueData(Data)
    Debug.Print Helper.EncVariant(Q)
    Debug.Assert Helper.SizeQueueData(Q) = -1
    Debug.Assert Not Helper.NoDataQueueData(Q)
    Debug.Assert Helper.DataQueueData(Q) = Data
    
    Q = Helper.MakeQueueData(Data, Size)
    Debug.Print Helper.EncVariant(Q)
    Debug.Assert Helper.SizeQueueData(Q) = Size
    Debug.Assert Not Helper.NoDataQueueData(Q)
    Debug.Assert Helper.DataQueueData(Q) = Data
    
    Q = Helper.EditDataQueueData(Q, Array("Hello", "World"))
    Debug.Print Helper.EncVariant(Q)
    Q = Helper.EditSizeQueueData(Q, 567)
    Debug.Print Helper.EncVariant(Q)
    Q = Helper.EditDataQueueData(Q)
    Debug.Print Helper.EncVariant(Q)
    Q = Helper.EditSizeQueueData(Q)
    Debug.Print Helper.EncVariant(Q)
    
    Set Helper = Nothing
End Sub
'}}}



