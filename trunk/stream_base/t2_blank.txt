'class
'  name;T2
'{{{
Option Explicit

Const ABOUT_THIS_CLASS = "Tier 2 interface tester"

' designed for IStreamBase revision r188+

Private Helper As StreamBaseHelper

Implements IStreamBase

'=== T2 implements for my own begin ===

'=== T2 implements for my own end ===
'=== event procedures begin ===

Private Sub Class_Initialize()
    Set Helper = New StreamBaseHelper
    Helper.SetCaller Me
    Helper.NameMe ABOUT_THIS_CLASS
End Sub

Private Sub Class_Terminate()
    Set Helper = Nothing
End Sub

'=== event procedures end ===
'=== IStreamBase begin ===


' about this class

Public Property Get IStreamBase_AboutMe() As String
    IStreamBase_AboutMe = Helper.AboutMe
End Property

Public Sub IStreamBase_NameMe(Optional ByVal NewName As String = "")
    If NewName = "" Then NewName = ABOUT_THIS_CLASS
    Helper.NameMe NewName
End Sub

Public Property Get IStreamBase_Description() As String
    IStreamBase_Description = Helper.Description
End Property


' connect to neighbor Tiers

Public Function IStreamBase_InsertT1(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT1 = Helper.InsertT1(Tier)
End Function

Public Function IStreamBase_InsertT3(Tier As IStreamBase) As IStreamBase
    Set IStreamBase_InsertT3 = Helper.InsertT3(Tier)
End Function

Public Function IStreamBase_ConnectT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT1 = Helper.ConnectT1(Tier)
End Function

Public Function IStreamBase_ConnectT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_ConnectT3 = Helper.ConnectT3(Tier)
End Function

Public Function IStreamBase_SetT1(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT1 = Helper.SetT1(Tier)
End Function

Public Function IStreamBase_SetT3(Optional Tier As IStreamBase = Nothing) As IStreamBase
    Set IStreamBase_SetT3 = Helper.SetT3(Tier)
End Function

Public Function IStreamBase_HasT1() As Boolean
    IStreamBase_HasT1 = Helper.HasT1
End Function

Public Function IStreamBase_HasT3() As Boolean
    IStreamBase_HasT3 = Helper.HasT3
End Function

Public Function IStreamBase_IsMe(Tier As Object) As Boolean
    IStreamBase_IsMe = Helper.IsMe(Tier)
End Function


' finder

Public Function IStreamBase_SearchEndOfStreamTx() As Boolean
    IStreamBase_SearchEndOfStreamTx = Helper.SearchEndOfStreamTx
End Function

Public Function IStreamBase_SearchEndOfLineTx() As Boolean
    IStreamBase_SearchEndOfLineTx = Helper.SearchEndOfLineTx
End Function


' open / close

Public Function IStreamBase_OpenReadTx(Args As Variant) As Boolean
    IStreamBase_OpenReadTx = Helper.OpenReadTx(Args)
End Function

Public Function IStreamBase_OpenWriteTx(Args As Variant) As Boolean
    IStreamBase_OpenWriteTx = Helper.OpenWriteTx(Args)
End Function

Public Function IStreamBase_CloseReadTx(Arg As Variant) As Boolean
    IStreamBase_CloseReadTx = Helper.CloseReadTx(Arg)
End Function

Public Function IStreamBase_CloseWriteTx(Arg As Variant) As Boolean
    IStreamBase_CloseWriteTx = Helper.CloseWriteTx(Arg)
End Function


' reader

Public Function IStreamBase_SkipLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_SkipLineTx = Helper.SkipLineTx(Repeat)
End Function


' writer

Public Function IStreamBase_WriteTx() As Boolean
    IStreamBase_WriteTx = Helper.WriteTx()
End Function

Public Function IStreamBase_FeedLineTx(Optional ByVal Repeat As Long = 1) As Boolean
    IStreamBase_FeedLineTx = Helper.FeedLineTx(Repeat)
End Function


' cursor

Public Sub IStreamBase_SetPositionTx(Optional ByVal Position As Long = 0)
    Helper.SetPositionTx (Position)
End Sub

Public Function IStreamBase_GetPositionTx() As Long
    IStreamBase_GetPositionTx = Helper.GetPositionTx
End Function


' queue

Public Property Get IStreamBase_Que() As Collection
    Set IStreamBase_Que = Helper.Que
End Property

Public Sub IStreamBase_Enqueue(Arg As Variant)
    Helper.Enqueue Arg
End Sub

Public Function IStreamBase_Dequeue() As Variant
    IStreamBase_Dequeue = Helper.Dequeue
End Function

Public Function IStreamBase_CheatQueue() As Variant
    IStreamBase_CheatQueue = Helper.CheatQueue
End Function

Public Sub IStreamBase_EditFirstQueue(Data As Variant)
    Helper.EditFirstQueue Data
End Sub

Public Sub IStreamBase_InsertBeforeFirstQueue(Arg As Variant)
    Helper.InsertBeforeFirstQueue Arg
End Sub

Public Function IStreamBase_IsEmptyQueue() As Boolean
    IStreamBase_IsEmptyQueue = Helper.IsEmptyQueue
End Function

Public Sub IStreamBase_ClearQueue()
    Helper.ClearQueue
End Sub


' status and logging

Public Function IStreamBase_IsBusy() As Boolean
    IStreamBase_IsBusy = Helper.IsBusy
End Function

Public Sub IStreamBase_LogError(Optional Arg As Variant = Empty)
    Helper.LogError Arg
End Sub

Public Function IStreamBase_LogErrorTx() As String
    IStreamBase_LogErrorTx = Helper.LogErrorTx
End Function


' local variables

Public Property Get IStreamBase_Properties(Key As String) As Variant

End Property

Public Property Let IStreamBase_Properties(Key As String, Value As Variant)

End Property


'=== IStreamBase end ===
'}}}
