'module
'  name;testDimension
'{{{
Option Explicit

Sub test_all()
    test_DimArray
    test_BoundsArray
    test_FlatArray2D
    test_FlatArrayNest
    test_ToNestArray2D
    test_FromNestArray2D
    test_FromNestRowsArray2D
    
    test_measure
    test_measure_more
    test_measure_bulk
End Sub

Sub test_measure()
    Const nRow = 128
    Const nCol = 32
    Dim r As Long
    Dim c As Long
    Dim b As Long
    Dim BeginAt As Single
    Dim EndAt As Single
    Dim TargetColumns As Range
    Dim RBuffer() As Variant
    Dim BBuffer() As Variant
    
    ReDim RBuffer(1 To nCol)
    ReDim BBuffer(1 To nRow, 1 To nCol)
    Application.Goto Sheet1.Range("A1")
    
    With Sheet1
        .Cells.Clear
        Set TargetColumns = Range(.Columns(1), .Columns(nCol))
        
        BeginAt = Timer()
        For r = 1 To nRow
            For c = 1 To nCol
                .Cells(r, c).Value = Rnd
            Next
        Next
        EndAt = Timer()
        Debug.Print "Each Cell: ", EndAt - BeginAt
        
        BeginAt = Timer()
        For r = 1 To nRow
            For c = 1 To nCol
                RBuffer(c) = Rnd
            Next
            TargetColumns.Rows(r) = RBuffer
        Next
        EndAt = Timer()
        Debug.Print "Each Row: ", EndAt - BeginAt
        
        BeginAt = Timer()
        For r = 1 To nRow
            For c = 1 To nCol
                BBuffer(r, c) = Rnd
            Next
        Next
        TargetColumns.Rows("1:" & nRow) = BBuffer
        EndAt = Timer()
        Debug.Print "Bulk Rows: ", EndAt - BeginAt
        
    End With
End Sub

Sub test_measure_more()
    Application.ScreenUpdating = False
    Sheet1.EnableCalculation = False
    
    test_measure
    
    Sheet1.EnableCalculation = True
    Application.ScreenUpdating = True
End Sub

Sub test_measure_bulk()
    Const nCol = 32
    Dim nRow As Long
    Dim i As Long
    Dim r As Long
    Dim c As Long
    Dim b As Long
    Dim BeginAt As Single
    Dim BeginTrans As Single
    Dim EndAt As Single
    Dim TargetColumns As Range
    Dim RBuffer() As Variant
    Dim BBuffer() As Variant
    
    ReDim RBuffer(1 To nCol)
    Application.Goto Sheet1.Range("A1")
    
    Application.ScreenUpdating = False
    
    With Sheet1
        .EnableCalculation = False
        .Cells.Clear
        Set TargetColumns = Range(.Columns(1), .Columns(nCol))
        
        For i = 0 To 12
            nRow = 2 ^ i
            ReDim BBuffer(1 To nRow)
            BeginAt = Timer()
            For r = 1 To nRow
                For c = 1 To nCol
                    RBuffer(c) = Rnd
                Next
                BBuffer(r) = RBuffer
            Next
            BeginTrans = Timer()
            TargetColumns.Rows("1:" & nRow) = FromNestRowsArray2D(BBuffer, nRow, nCol)(0)
            EndAt = Timer()
            Debug.Print "converter: ", nRow, BeginTrans - BeginAt, EndAt - BeginTrans
        Next
        
        .EnableCalculation = True
    End With
    
    Application.ScreenUpdating = True
End Sub

Sub test_DimArray()
    Dim a
    Dim b(0 To 1)
    Dim c(0 To 1, 0 To 2)
    Dim d(0 To 1, 0 To 2, 0 To 3)
    Dim e(0 To 1, 0 To 2, 0 To 3, 0 To 4)
    
    Debug.Assert DimArray(a) = 0
    Debug.Assert DimArray(b) = 1
    Debug.Assert DimArray(c) = 2
    Debug.Assert DimArray(d) = 3
    Debug.Assert DimArray(e) = 4
End Sub

Sub test_BoundsArray()
    Dim a
    Dim b(0 To 1)
    Dim c(0 To 1, 0 To 2)
    Dim d(0 To 1, 0 To 2, 0 To 3)
    Dim e(0 To 1, 0 To 2, 0 To 3, 0 To 4)
    
    Debug.Assert EncVariant(BoundsArray(a)) = "()"
    Debug.Assert EncVariant(BoundsArray(b)) = "((0,1,),)"
    Debug.Assert EncVariant(BoundsArray(c)) = "((0,1,),(0,2,),)"
    Debug.Assert EncVariant(BoundsArray(d)) = "((0,1,),(0,2,),(0,3,),)"
    Debug.Assert EncVariant(BoundsArray(e)) = "((0,1,),(0,2,),(0,3,),(0,4,),)"
End Sub

Function EncVariant(Data As Variant) As String
    Dim x As Variant
    Dim out As String
    Dim ArrayBegin As String
    Dim ArrayEnd As String
    Dim Delimiter As String
    Dim Bra As Variant
    
    Bra = Array("(", ")", ",")
    ArrayBegin = Bra(0)
    ArrayEnd = Bra(1)
    Delimiter = Bra(2)
    
    If IsError(Data) Or IsEmpty(Data) Then
        ' IsError(Array(1,,2)(1)) = True
        ' IsEmpty(Array(1,Empty,2)(1)) = True
        out = ""
    ElseIf IsArray(Data) Then
        out = ArrayBegin
        For Each x In Data
            out = out & EncVariant(x) & Delimiter
        Next
        out = out & ArrayEnd
    ElseIf IsObject(Data) Then
        out = TypeName(Data)
    Else
        out = Data
    End If
    
    EncVariant = out
End Function

Sub test_FlatArray2D()
    Dim x(3 To 5, 1 To 2) As String
    Dim r As Long
    Dim c As Long
    
    For r = 3 To 5
        For c = 1 To 2
            x(r, c) = Chr(64 + c) & r
        Next
    Next
    
    Debug.Assert EncVariant(FlatArray2D(x, 1)) = "(A3,B3,A4,B4,A5,B5,)"
    Debug.Assert EncVariant(FlatArray2D(x, 2)) = "(A3,A4,A5,B3,B4,B5,)"
End Sub

Sub test_FoldArray2D()
    Dim x As Variant
    Dim y As Variant
    Dim i As Long
    
    x = Array(1, 2, 3, 4, 5, 6, 7)
    
    y = FoldArray2D(x)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 7
    Debug.Assert UBound(y, 2) = 1
    For i = 1 To 7
        Debug.Assert y(i, 1) = i
    Next
    
    y = FoldArray2D(x, 1, 4)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 2
    Debug.Assert UBound(y, 2) = 4
    Debug.Assert y(1, 1) = 1
    Debug.Assert y(1, 2) = 2
    Debug.Assert y(1, 3) = 3
    Debug.Assert y(1, 4) = 4
    Debug.Assert y(2, 1) = 5
    Debug.Assert y(2, 2) = 6
    Debug.Assert y(2, 3) = 7
    Debug.Assert IsEmpty(y(2, 4))
    
    y = FoldArray2D(x, 2, 4)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 4
    Debug.Assert UBound(y, 2) = 2
    Debug.Assert y(1, 1) = 1
    Debug.Assert y(2, 1) = 2
    Debug.Assert y(3, 1) = 3
    Debug.Assert y(4, 1) = 4
    Debug.Assert y(1, 2) = 5
    Debug.Assert y(2, 2) = 6
    Debug.Assert y(3, 2) = 7
    Debug.Assert IsEmpty(y(4, 2))
    
    y = FoldArray2D(x, 1, 3, 0)
    Debug.Assert LBound(y, 1) = 0
    Debug.Assert LBound(y, 2) = 0
    Debug.Assert UBound(y, 1) = 2
    Debug.Assert UBound(y, 2) = 2
    Debug.Assert y(0, 0) = 1
    Debug.Assert y(0, 1) = 2
    Debug.Assert y(0, 2) = 3
    Debug.Assert y(1, 0) = 4
    Debug.Assert y(1, 1) = 5
    Debug.Assert y(1, 2) = 6
    Debug.Assert y(2, 0) = 7
    Debug.Assert IsEmpty(y(2, 1))
    Debug.Assert IsEmpty(y(2, 2))
End Sub

Sub test_FlatArrayNest()
    Debug.Assert EncVariant(FlatArrayNest(Array())) = "()"
    Debug.Assert EncVariant(FlatArrayNest(Array(1, 2, 3))) = "(1,2,3,)"
    Debug.Assert EncVariant(FlatArrayNest(Array(1, Array(2, 3), 4))) = "(1,2,3,4,)"
    Debug.Assert EncVariant(FlatArrayNest(Array(Array(1, 2, 3), 4))) = "(1,2,3,4,)"
    Debug.Assert EncVariant(FlatArrayNest(Array(1, Array(2, 3), Array(4, 5)))) = "(1,2,3,4,5,)"
    Debug.Assert EncVariant(FlatArrayNest(Array(1, Array(2, 3, Array(4, 5)), 6))) = "(1,2,3,4,5,6,)"
End Sub

Sub test_FoldArrayNest()
    Dim x As Variant
    
    x = Array(1, 2, 3, 4, 5, 6, 7)
    Debug.Assert EncVariant(FoldArrayNest(x)) = "((1,),(2,),(3,),(4,),(5,),(6,),(7,),)"
    Debug.Assert EncVariant(FoldArrayNest(x, 2)) = "((1,2,),(3,4,),(5,6,),(7,,),)"
    Debug.Assert EncVariant(FoldArrayNest(x, 3)) = "((1,2,3,),(4,5,6,),(7,,,),)"
    Debug.Assert EncVariant(FoldArrayNest(x, 7)) = "((1,2,3,4,5,6,7,),)"
    Debug.Assert EncVariant(FoldArrayNest(x, 8)) = "((1,2,3,4,5,6,7,),)"
    Debug.Assert EncVariant(FoldArrayNest(x, 0)) = "((1,),(2,),(3,),(4,),(5,),(6,),(7,),)"
    Debug.Assert EncVariant(FoldArrayNest("a", 0)) = "((a,),)"
End Sub

Sub test_ToNestArray2D()
    Dim x(3 To 5, 1 To 3) As Variant
    Dim r As Long
    Dim c As Long
    
    For r = 3 To 5
        For c = 1 To 2
            x(r, c) = Chr(64 + c) & r
        Next
    Next
    x(4, 3) = "C4"
    
    Debug.Assert EncVariant(ToNestArray2D(x)) = "((A3,B3,),(A4,B4,C4,),(A5,B5,),)"
    Debug.Assert EncVariant(ToNestArray2D(x, 1, True)) = "((A3,B3,,),(A4,B4,C4,),(A5,B5,,),)"
    Debug.Assert EncVariant(ToNestArray2D(x, 2)) = "((A3,A4,A5,),(B3,B4,B5,),(,C4,),)"
    Debug.Assert EncVariant(ToNestArray2D(x, 2, True)) = "((A3,A4,A5,),(B3,B4,B5,),(,C4,,),)"
End Sub

Sub test_FromNestArray2D()
    Dim x As Variant
    Dim y As Variant
    
    x = Array( _
            Array("A3", "B3"), _
            Array("A4", "B4", "C4"), _
            Array(), _
            Array("A6", "B6") _
        )
    
    y = FromNestArray2D(x)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 4
    Debug.Assert UBound(y, 2) = 3
    Debug.Assert EncVariant(ToNestArray2D(y)) = "((A3,B3,),(A4,B4,C4,),(),(A6,B6,),)"
    
    y = FromNestArray2D(x, 2)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 3
    Debug.Assert UBound(y, 2) = 4
    Debug.Assert EncVariant(ToNestArray2D(y)) = "((A3,A4,,A6,),(B3,B4,,B6,),(,C4,),)"
    
    y = FromNestArray2D(x, 1, 2)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 4
    Debug.Assert UBound(y, 2) = 2
    Debug.Assert EncVariant(ToNestArray2D(y)) = "((A3,B3,),(A4,B4,),(),(A6,B6,),)"
    
    y = FromNestArray2D(x, 1, 5)
    Debug.Assert LBound(y, 1) = 1
    Debug.Assert LBound(y, 2) = 1
    Debug.Assert UBound(y, 1) = 4
    Debug.Assert UBound(y, 2) = 5
    Debug.Assert EncVariant(ToNestArray2D(y)) = "((A3,B3,),(A4,B4,C4,),(),(A6,B6,),)"
    
    y = FromNestArray2D(x, 1, -1, 0)
    Debug.Assert LBound(y, 1) = 0
    Debug.Assert LBound(y, 2) = 0
    Debug.Assert UBound(y, 1) = 3
    Debug.Assert UBound(y, 2) = 2
    Debug.Assert EncVariant(ToNestArray2D(y)) = "((A3,B3,),(A4,B4,C4,),(),(A6,B6,),)"
End Sub

Sub test_FromNestRowsArray2D()
    Dim x As Variant
    Dim y As Variant
    
    x = Array( _
            Array("A3", "B3"), _
            Array("A4", "B4", "C4"), _
            Array(), _
            Array("A6", "B6") _
        )
    
    y = FromNestRowsArray2D(x)
    Debug.Assert LBound(y) = 0
    Debug.Assert UBound(y) = 0
    Debug.Assert LBound(y(0), 1) = 1
    Debug.Assert LBound(y(0), 2) = 1
    Debug.Assert UBound(y(0), 1) = 4
    Debug.Assert UBound(y(0), 2) = 2
    Debug.Assert EncVariant(ToNestArray2D(y(0))) = "((A3,B3,),(A4,B4,),(),(A6,B6,),)"
    
    y = FromNestRowsArray2D(x, 2, 3)
    Debug.Assert LBound(y) = 0
    Debug.Assert UBound(y) = 1
    Debug.Assert LBound(y(0), 1) = 1
    Debug.Assert LBound(y(0), 2) = 1
    Debug.Assert UBound(y(0), 1) = 2
    Debug.Assert UBound(y(0), 2) = 3
    Debug.Assert EncVariant(ToNestArray2D(y(0))) = "((A3,B3,),(A4,B4,C4,),)"
    Debug.Assert EncVariant(ToNestArray2D(y(1))) = "((),(A6,B6,),)"
    
    y = FromNestRowsArray2D(x, 3, 3, False)
    Debug.Assert LBound(y) = 0
    Debug.Assert UBound(y) = 1
    Debug.Assert LBound(y(0), 1) = 1
    Debug.Assert LBound(y(0), 2) = 1
    Debug.Assert UBound(y(0), 1) = 3
    Debug.Assert UBound(y(0), 2) = 3
    Debug.Assert EncVariant(ToNestArray2D(y(0))) = "((A3,B3,),(A4,B4,C4,),(),)"
    Debug.Assert EncVariant(ToNestArray2D(y(1))) = "((A6,B6,),(),(),)"
End Sub
'}}}


