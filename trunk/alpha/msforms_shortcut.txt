form ショートカットのメモ

ボタン類のみ、
Accelerator というプロパティがあって、
"G" などと設定すれば、
Alt-G にショートカットが割り当てられる。
こいつは、フォーカスによらず、
フォーム内グローバルに使える。

メニューでやるような、
キャプションへの &G 表記は通用しない。
これを書いたからといって、
ショートカットにならないし、アンダーバーへの表記変換も無い。

イベントが透過的でないため、
親フォームでフォームグローバルなショートカットを定義することができない。
そのときフォーカスがあるコントロールに、
イベントが取られてしまうため。

これをコードで回避するには、

Private Sub Common_shortcut(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Debug.Print KeyCode
    If Shift = 4 And KeyCode = vbKeyH Then CommandButton1_Click
End Sub

のような、グローバルショートカット処理ルーチンを作って、
すべてのコントロールとフォームに、

Private Sub CommandButton1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Common_shortcut KeyCode, Shift
End Sub

のような処理を入れてやるとよい。

先の、 Accelerator と、この共通処理ルーチン方式には
一箇所違いがある。

Acdelerator は、
1. フォーカスを移す。
2. クリック等のイベントを発する。

という処理を行うため、フォーカスが移動する。

これに対して、共通処理ルーチンは、
直接、処理ルーチンを発行するので、
フォーカスが移らず、イベントも発行されない。
そのまま処理だけが実行される。

シフトキーの値 Shift に関して、

fmShiftMask 1 Shift キーが押されました。 
fmCtrlMask 2 Ctrl キーが押されました。 
fmAltMask 4 Alt キーが押されました。 

みたいな解説がヘルプにはあるが、
うちの環境では
fmAltMask が未定義だ、みたいなエラーになる。

msforms の参照状況に依存するのか？

いずれにせよ、定義されてない前提で考えた方が無難だ。

KeyCode も、ヘルプで見つからないが、
vbKeyA, vbKeyB,,, のような定数が使える。

ちなみに、
vbKeyG = 71
vbKeyH = 72


この方法に重大な欠陥がみつかった。

アクセラレータイベントを無効にできないため、
イベントがフォームを通過して親フォームに届く。
つまり、
親アプリに存在する Alt-F などを実行すると、
こちらのショートカットは無視されて、
親アプリのメニューが実行される。

ようは、
アクセラレータイベント発生、
これがトラップされなければ、キーダウンイベントへ。
という順序で回るので、
アクセラレータ、ユーザーフォーム、
アクセラレータ、親アプリ、
キーダウン、ユーザーフォーム、
の順に処理が回っているようだ。

違った。
感覚的には、上記のとおりだが、
実装順序は、違うようだ。

キーダウン、
自分のアクセラレータ、
親アプリのアクセラレータ、
の順だ。

キーダウンで、アクセラレータ処理済みフラグを立てられないから、
同じキーへの処理をしたとしても、
アクセラレータに処理がまわる。
へたに、キーダウンでフォーカスを移したりしたら、
自分のアクセラレータが無効になるので、
勝手に親アプリが動いてしまう最悪のケースもある。


ちなみに、
最初の、 Accelerator プロパティ定義だと、
親と重複するアクセラレータを定義しても、こちらが優先される。


TakeFocusOnClick = False にすると、
ボタンをクリックしてもそこにフォーカスが留まらない、
ツールバーっぽいボタン動作にできる。

ただし、この場合でも、
アクセラレータのショートカットを使うと、
フォーカスを持ってしまう。

アクセラレータ定義していると、
他のコントロールにフォーカスがあっても
強制的にフォーカスが移るので、
グローバルっていう点で問題はない。
ただ、フォーカスが移ってしまうのが弱点で、
こいつは、
クリックイベントハンドラで、強制アンフォーカスするしかなさそうだ。



Excel 2000 限定かどうかわからないが、
textbox にすでにフォーカスがあって、
フォームが一度フォーカスを失い、
再度フォーカスを得たとき、
フォーカスがあるはずの textbox がキーを受け付けない。
textbox.setfocus しても
既にフォーカスがあることになっているので効かない。

一度、別のボタン等に setfocus してから、
textbox.setfocus すると、通常に動作する。

この現象は、msgbox なんかを出して、そこから復帰したときに
見られる。




textbox.SelStart は 0 から始まり、負を指定するとエラーになる。
大きすぎる値はエラーにならず、end に飛ぶ。
これはカーソルが移るだけでなく、自動スクロールする。
また、フォーカスされてなくても使えるようだ。


textbox では、
Ctrl-C,X,V,A,Z などのショートカットがそのまま使える。
Ctrl-Z の Undo は動作がいまいち不明確なので使わない方が良さそう。


