'ssf-begin
';

'class
'   name;SsfCellStream
'{{{
Option Explicit

'=== properties begin ===


Private TargetRange As Range
Private TargetSheet As Worksheet
Private CellCounter As Long

Public Env As GlobalResources
Public PropertyName As String
Public Queue As Collection

Public Property Get Worksheet() As Worksheet
    Set Worksheet = TargetSheet
End Property

Public Property Get Range() As Range
    Set Range = TargetRange
End Property

Public Sub SetWorksheet(Ws As Worksheet)
    Set TargetSheet = Ws
    If Ws Is Nothing Then
        Set TargetRange = Nothing
        CellCounter = 0
        ClearQueue
    Else
        Set TargetRange = Ws.Cells
    End If
End Sub

Public Sub SetRange(Ra As Range)
    Set TargetRange = Ra
    If Ra Is Nothing Then
        Set TargetSheet = Nothing
        CellCounter = 0
        ClearQueue
    Else
        If Not TargetSheet Is Ra.Worksheet Then Set TargetSheet = Ra.Worksheet
    End If
End Sub

Public Function IsNotReady() As Boolean
    IsNotReady = IsEmptyQueue Or (TargetRange Is Nothing) Or (PropertyName = "")
End Function


'=== properties end ===
'=== spawn begin ===


Public Function Spawn() As SsfCellStream
    Set Spawn = New SsfCellStream
    With Spawn
        Set .Env = Env
        .PropertyName = PropertyName
    End With
End Function

Public Function SpawnAreas() As Collection
    Dim out As Collection
    Dim Spawned As SsfCellStream
    Dim R As Long
    Dim C As Long
    Dim Columns As Long
    Dim Data As Variant
    Dim AllEmpty As Boolean
    Dim TopLeftCell As Range
    
    If IsNotReady Then Exit Function
    
    Set out = New Collection
    Columns = TargetRange.Columns.Count
    
    ' add 1 empty row as a terminator
    For C = 1 To Columns
        Enqueue Empty
    Next
    
    Set Spawned = Spawn
    Set TopLeftCell = TargetRange.Cells(1)
    R = 0
    Do Until IsEmptyQueue
        AllEmpty = True
        For C = 1 To Columns
            Data = Dequeue
            Spawned.WriteText Data
            If Not IsEmpty(Data) Then AllEmpty = False
        Next
        If AllEmpty Then
            Spawned.SetRange TargetSheet.Range(TopLeftCell, TopLeftCell.Offset(R, Columns - 1))
            Spawned.MinimizeRange
            out.Add Spawned
            Set Spawned = Spawn
            Set TopLeftCell = TopLeftCell.Offset(R + 1, 0)
            R = 0
        Else
            R = R + 1
        End If
    Loop
    Set Spawned = Nothing
    
    Set SpawnAreas = out
End Function


'=== spawn end ===
'=== cell reader / writer begin ===


Public Sub ReadTargetCell(Optional ByVal EmptyValue As Variant = Empty)
    On Error GoTo HasError
    
    Select Case LCase(PropertyName)
    Case "formula-or-value"
        EnqueueRangeFormulaValue EmptyValue
    Case "value", "value2", "text", "formula", "formular1c1"
        EnqueueRangeValueFamily EmptyValue
    Case Else
        EnqueueRangeProperty EmptyValue
    End Select
    Exit Sub
    
HasError:
    Env.LogWrite "ReadTargetCell: Error " & Err.Number & " " & Err.Description
End Sub

Public Sub WriteTargetCell()
    On Error GoTo HasError
    
    Select Case LCase(PropertyName)
    Case "value", "value2", "text", "formula", "formular1c1"
        DequeueRangeValueFamily
    Case Else
        DequeueRangeProperty
    End Select
    Exit Sub
    
HasError:
    Env.LogWrite "WriteTargetCell: Error " & Err.Number & " " & Err.Description
End Sub

Public Sub WriteText(Data As Variant)
    Enqueue Data
End Sub


'=== cell reader / writer end ===
'=== ssf reader begin ===


Public Sub ReadSsfCells(Block As Variant, LineFeed As String)
    
    Dim KeyValue As Variant
    Dim Key As String
    Dim Value As String
    Dim RepeatCounter As Long
    Dim i As Long
    
    RepeatCounter = 0
    
    On Error Resume Next
    
    For Each KeyValue In Block
        Select Case SsfUtils.ExtractKeyValue(KeyValue, Key, Value)
        Case "address"
            If Not IsNotReady Then WriteTargetCell
            Set TargetRange = SsfUtilsExcel.ExcelAddressToRange(TargetSheet, Value, TargetSheet.Cells)
        Case "skip"
            For i = 1 To CLng(Val(Value))
                Enqueue Empty
            Next
        Case "repeat"
            RepeatCounter = CLng(Val(Value))
        Case ""
            Value = SsfUtils.LineFeedToLf(Value, LineFeed)
            If RepeatCounter > 0 Then
                Do While RepeatCounter > 0
                    RepeatCounter = RepeatCounter - 1
                    Enqueue Value
                Loop
            Else
                Enqueue Value
            End If
        End Select
        If Err.Number <> 0 Then
            Env.LogWrite PropertyName & ": " & Err.Number & " " & Err.Description & "(" & Key & "," & Value & ")"
            Err.Clear
        End If
    Next
    If Not IsNotReady Then WriteTargetCell
End Sub


'=== ssf reader end ===
'=== ssf writer begin ===


Public Sub WriteSsfSimple(Stream As Object)
    ' compatible with the primitive
    If IsNotReady Then Exit Sub
    
    WriteLineAddress Stream, TargetRange
    ' simple list, each cell in each line
    Do Until IsEmptyQueue
        Stream.WriteLine SsfWriter.MakeSsfLineCellData(Dequeue)
    Loop
End Sub

Public Sub WriteSsfSkip(Stream As Object)
    Dim Data As Variant
    Dim LastData As Variant
    Dim Counter As Long
    
    If IsNotReady Then Exit Sub
    
    WriteLineAddress Stream, TargetRange
    ' simple list with skip and repeat
    Counter = 0
    LastData = Empty
    Do Until IsEmptyQueue
        Data = Dequeue
        If Data = LastData Then
            Counter = Counter + 1
        Else
            WriteLineSkipOrRepeat Stream, Counter, LastData
            LastData = Data
            Counter = 1
        End If
    Loop
    If Counter > 0 And Not IsEmpty(LastData) Then
        WriteLineRepeat Stream, Counter, LastData
    End If
End Sub

Public Sub WriteSsfBlocks(Stream As Object)
    Dim Block As SsfCellStream
    Dim Blocks As Collection
    
    If IsNotReady Then Exit Sub
    
    ' spawn child blocks divided by empty rows
    Set Blocks = SpawnAreas()
    Do While Blocks.Count > 0
        Set Block = Blocks(1)
        With Block
            .WriteSsfSkip Stream
            .SetRange Nothing
        End With
        Set Block = Nothing
        Blocks.Remove 1
    Loop
End Sub


'=== ssf writer end ===
'=== ssf writer helper begin ===


Private Sub WriteLineAddress(Stream As Object, Target As Range)
    Stream.WriteLine SsfWriter.MakeSsfLine("address", SsfUtilsExcel.ExcelRangeToAddress(Target))
End Sub

Private Sub WriteLineSkipOrRepeat(Stream As Object, Count As Long, Data As Variant)
    If IsEmpty(Data) Then
        WriteLineSkip Stream, Count
    Else
        WriteLineRepeat Stream, Count, Data
    End If
End Sub

Private Sub WriteLineSkip(Stream As Object, Count As Long)
    If Count > 0 Then Stream.WriteLine SsfWriter.MakeSsfLine("skip", Count)
End Sub

Private Sub WriteLineRepeat(Stream As Object, Count As Long, Data As Variant)
    If Count > 1 Then Stream.WriteLine SsfWriter.MakeSsfLine("repeat", Count)
    Stream.WriteLine SsfWriter.MakeSsfLineCellData(Data)
End Sub


'=== ssf writer helper end ===
'=== queue begin ===

Private Function IsEmptyQueue() As Boolean
    IsEmptyQueue = (Queue.Count = 0)
End Function

Private Sub ClearQueue()
    Do While Queue.Count > 0
        Queue.Remove 1
    Loop
End Sub

Private Sub Enqueue(Data As Variant)
    Queue.Add Data
End Sub

Private Function Dequeue() As Variant
    Dequeue = Queue(1)
    Queue.Remove (1)
End Function

Private Sub EnqueueArray(Data As Variant)
    Dim x As Variant
    For Each x In Data
        Enqueue x
    Next
End Sub

Private Sub EnqueueRangeProperty(Optional ByVal EmptyValue As Variant = Empty)
    Dim R As Long
    Dim C As Long
    Dim Data As Variant
    
    On Error Resume Next
    
    With TargetRange
        For R = 1 To .Rows.Count
            For C = 1 To .Columns.Count
                Data = CallByName(.Cells(R, C), PropertyName, VbGet)
                If Err.Number <> 0 Then
                    Env.LogWrite "EnqueueRangeProperty: Error " & Err.Number & " " & Err.Description & "(" & R & "," & C & ")"
                    Data = Empty
                End If
                If Data = EmptyValue Then
                    Enqueue Empty
                Else
                    Enqueue Data
                End If
            Next
        Next
    End With
End Sub

Private Sub DequeueRangeProperty()
    Dim R As Long
    Dim C As Long
    Dim Data As Variant
    
    'Env.LogWrite "DequeueRangeProperty: " & TargetRange.Address(False, False, xlA1, False)
    With TargetRange
        For R = 1 To .Rows.Count
            For C = 1 To .Columns.Count
                Data = Dequeue
                If Not IsEmpty(Data) Then
                    CallByName .Cells(R, C), PropertyName, VbLet, Data
                    If Err.Number <> 0 Then
                        Env.LogWrite "DequeueRangeProperty: Error " & Err.Number & " " & Err.Description & "(" & R & "," & C & ")"
                    End If
                End If
            Next
        Next
    End With
End Sub

Private Sub EnqueueMatrix(Data As Variant, Optional ByVal EmptyValue As Variant = Empty)
    Dim R As Long
    Dim C As Long
    
    For R = LBound(Data, 1) To UBound(Data, 1)
        For C = LBound(Data, 2) To UBound(Data, 2)
            If Data(R, C) = EmptyValue Then
                Enqueue Empty
            Else
                Enqueue Data(R, C)
            End If
        Next
    Next
End Sub

Private Function DequeueMatrix(Optional ByVal Columns As Long = 1, _
        Optional ByVal Rows As Long = 1, _
        Optional ByVal DefaultValue As Variant = Empty) As Variant
    Dim out() As Variant
    Dim R As Long
    Dim C As Long
    
    If Columns <= 0 Or Rows <= 0 Then
        DequeueMatrix = Empty
        Exit Function
    End If
    
    ReDim out(1 To Rows, 1 To Columns)
    
    For R = 1 To Rows
        For C = 1 To Columns
            If IsEmptyQueue Then GoTo EmptyQueue
            out(R, C) = Dequeue
        Next
    Next
    
EmptyQueue:
    Do While R <= Rows
        Do While C <= Columns
            out(R, C) = DefaultValue
            C = C + 1
        Loop
        R = R + 1
    Loop
    
    DequeueMatrix = out
End Function

Private Function CheatQueue2D(Row As Long, Column As Long, ColumnSize As Long) As Variant
    CheatQueue2D = Queue((Row - 1) * ColumnSize + Column)
End Function

Private Sub UpdateQueue2D(Data As Variant, Row As Long, Column As Long, ColumnSize As Long)
    Dim Position As Long
    
    Position = (Row - 1) * ColumnSize + Column
    Queue.Add Data, After:=Position
    Queue.Remove Position
End Sub

Private Sub UpdateQueueByCellProperty(Ra As Range, MyProperty As String)
    Dim Row As Long
    Dim Column As Long
    Dim ColumnSize As Long
    Dim Data As Variant
    
    On Error GoTo HasError
    
    Row = Ra.Row - TargetRange.Cells(1).Row + 1
    Column = Ra.Column - TargetRange.Cells(1).Column + 1
    ColumnSize = TargetRange.Columns.Count
    Data = CallByName(Ra, MyProperty, VbGet)
    UpdateQueue2D Data, Row, Column, ColumnSize
    Exit Sub
    
HasError:
    Env.LogWrite "UpdateQueueByCellProperty: Error " & Err.Number & " " & Err.Description & "(" & Row & "," & Column & ")"
End Sub


'=== queue end ===
'=== extended queue begin ===


Private Function TryEnqueueRangeValueFamily(NewProperty As String, _
        Optional ByVal EmptyValue As Variant = Empty) As Boolean
    Dim RememberProperty As String
    
    RememberProperty = PropertyName
    PropertyName = NewProperty
    
    On Error Resume Next
    EnqueueRangeValueFamily EmptyValue
    TryEnqueueRangeValueFamily = (Err.Number = 0)
    Err.Clear
    
    PropertyName = RememberProperty
End Function

Private Sub EnqueueRangeValueFamily(Optional ByVal EmptyValue As Variant = Empty)
    Dim Data As Variant
    
    If SsfUtilsExcel.IsASingleCell(TargetRange) Then
        EnqueueRangeProperty EmptyValue
    Else
        Data = CallByName(TargetRange, PropertyName, VbGet)
        EnqueueMatrix Data, EmptyValue
    End If
End Sub

Private Sub DequeueRangeValueFamily()
    Dim Data As Variant
    
    Data = DequeueMatrix(TargetRange.Columns.Count, TargetRange.Rows.Count)
    CallByName TargetRange, PropertyName, VbLet, Data
End Sub

Private Sub EnqueueRangeFormulaValue(Optional ByVal EmptyValue As Variant = Empty)
    Dim CheckMixed As Variant
    Dim FormulaCells As Range
    Dim FormulaCell As Range
    
    CheckMixed = TargetRange.HasFormula
    If IsNull(CheckMixed) Then
        ' contains Formulas and Constants
        If TryEnqueueRangeValueFamily("FormulaR1C1", EmptyValue) Then GoTo DONE
        If Not TryEnqueueRangeValueFamily("Value", EmptyValue) Then
            Env.LogWrite "EnqueueRangeFormulaValue: Error at " & TargetRange.Address(False, False, xlA1, False)
            GoTo DONE
        End If
        Set FormulaCells = TargetRange.SpecialCells(xlCellTypeFormulas)
        For Each FormulaCell In FormulaCells
            UpdateQueueByCellProperty FormulaCell, "FormulaR1C1"
        Next
    ElseIf CBool(CheckMixed) Then
        ' contains only Formula(s)
        TryEnqueueRangeValueFamily "FormulaR1C1", EmptyValue
    Else
        ' contains only Constant(s)
        TryEnqueueRangeValueFamily "Value", EmptyValue
    End If
DONE:
End Sub


'=== extended queue end ===
'=== cell utility begin ===


Public Sub MinimizeRange()
    Dim R As Long
    Dim C As Long
    Dim RowBegin As Long
    Dim RowEnd As Long
    Dim ColumnBegin As Long
    Dim ColumnEnd As Long
    Dim NewRow As Range
    Dim NewColumn As Range
    
    ColumnEnd = CalculateMaxColumnAndRow(RowBegin, RowEnd)
    ColumnBegin = CalculateMinColumn()
    
    If ColumnEnd = 0 Or RowEnd = 0 Then
        SetRange Nothing
        Exit Sub
    End If
    
    Set NewRow = CropUnusedRows(RowBegin, RowEnd)
    Set NewColumn = CropUnusedColumns(RowBegin, RowEnd, ColumnBegin, ColumnEnd)
    Set TargetRange = Application.Intersect(NewRow, NewColumn)
End Sub

Private Function CropUnusedRows(RowBegin As Long, RowEnd As Long) As Range
    Dim C As Long
    Dim R As Long
    Dim Rows As Long
    Dim Columns As Long
    Dim NewRow As Range
    
    Rows = TargetRange.Rows.Count
    Columns = TargetRange.Columns.Count
    
    Set NewRow = TargetRange.EntireRow
    If RowBegin > 1 Or RowEnd < Rows Then
        Set NewRow = NewRow.Rows(RowBegin & ":" & RowEnd)
        ' remove unused data from queue
        For R = RowEnd + 1 To Rows
            For C = 1 To Columns
                Queue.Remove RowEnd * Columns + 1
            Next
        Next
        For R = 1 To RowBegin - 1
            For C = 1 To Columns
                Queue.Remove 1
            Next
        Next
    End If
    
    Set CropUnusedRows = NewRow
End Function

Private Function CropUnusedColumns(RowBegin As Long, RowEnd As Long, ColumnBegin As Long, ColumnEnd As Long) As Range
    ' expect this is called after CropUnusedRows
    Dim C As Long
    Dim R As Long
    Dim Rows As Long
    Dim Columns As Long
    Dim NewColumn As Range
    
    Rows = TargetRange.Rows.Count
    Columns = TargetRange.Columns.Count
    
    Set NewColumn = TargetRange.EntireColumn
    If ColumnBegin > 1 Or ColumnEnd < Columns Then
        Set NewColumn = TargetSheet.Range(NewColumn.Columns(ColumnBegin), NewColumn.Columns(ColumnEnd))
        For R = RowEnd - RowBegin + 1 To 1 Step -1
            For C = Columns To ColumnEnd + 1 Step -1
                Queue.Remove (R - 1) * Columns + C
            Next
            For C = ColumnBegin - 1 To 1 Step -1
                Queue.Remove (R - 1) * Columns + C
            Next
        Next
    End If
    
    Set CropUnusedColumns = NewColumn
End Function

Private Function CalculateMaxColumnAndRow(ByRef RowBegin As Long, ByRef RowEnd As Long) As Long
    Dim RealMaximums As Variant
    Dim MaxCount As Long
    Dim R As Long
    Dim Rows As Long
    
    RealMaximums = RealMaxColumns()
    RowBegin = 0
    RowEnd = 0
    MaxCount = 0
    For R = 1 To UBound(RealMaximums)
        If RealMaximums(R) > 0 Then
            If MaxCount < RealMaximums(R) Then MaxCount = RealMaximums(R)
            If RowBegin = 0 Then RowBegin = R
            RowEnd = R
        End If
    Next
    
    CalculateMaxColumnAndRow = MaxCount
End Function

Private Function CalculateMinColumn() As Long
    Dim RealMinimums As Variant
    Dim MinColumn As Long
    Dim R As Long
    Dim Rows As Long
    
    RealMinimums = RealMinColumns()
    MinColumn = TargetRange.Columns.Count + 1
    For R = 1 To UBound(RealMinimums)
        If RealMinimums(R) > 0 Then
            If MinColumn > RealMinimums(R) Then MinColumn = RealMinimums(R)
        End If
    Next
    
    CalculateMinColumn = MinColumn
End Function

Private Function RealMaxColumns() As Variant
    Dim R As Long
    Dim C As Long
    Dim Rows As Long
    Dim Columns As Long
    Dim out() As Variant
    
    Rows = TargetRange.Rows.Count
    Columns = TargetRange.Columns.Count
    ReDim out(1 To Rows + 1)
    out(Rows + 1) = 0   ' always add a 0 as a terminator
    
    For R = 1 To Rows
        For C = Columns To 1 Step -1
            If Not IsEmpty(CheatQueue2D(R, C, Columns)) Then Exit For
        Next
        out(R) = C
        'Debug.Print R, C
    Next
    
    RealMaxColumns = out
End Function

Private Function RealMinColumns() As Variant
    Dim R As Long
    Dim C As Long
    Dim Rows As Long
    Dim Columns As Long
    Dim out() As Variant
    
    Rows = TargetRange.Rows.Count
    Columns = TargetRange.Columns.Count
    ReDim out(1 To Rows + 1)
    out(Rows + 1) = 0   ' always add a 0 as a terminator
    
    For R = 1 To Rows
        For C = 1 To Columns
            If Not IsEmpty(CheatQueue2D(R, C, Columns)) Then Exit For
        Next
        If C > Columns Then C = 0
        out(R) = C
        'Debug.Print R, C
    Next
    
    RealMinColumns = out
End Function


'=== cell utility end ===
'=== calss events begin ===


Private Sub Class_Initialize()
    Set Queue = New Collection
End Sub

Private Sub Class_Terminate()
    Set Env = Nothing
    SetRange Nothing
    Set Queue = Nothing
End Sub

'=== calss events end ===

'}}}

'ssf-end

