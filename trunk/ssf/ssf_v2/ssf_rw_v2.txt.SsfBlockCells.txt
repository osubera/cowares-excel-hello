'ssf-begin
';

'module
'   name;SsfBlockCells
'{{{
Option Explicit

Public Sub CellsFormulaReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-formula"
    Const LocalProperty = "FormulaR1C1"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsNumberFormatReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-numberformat"
    Const LocalProperty = "NumberFormat"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsWidthReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-width"
    Const LocalProperty = "ColumnWidth"
    
    Set Env.CellStream.Translator = New SsfTranslateSize
    Env.CellStream.Translator.SetUp Env, LocalKey
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsHeightReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-height"
    Const LocalProperty = "RowHeight"
    
    Set Env.CellStream.Translator = New SsfTranslateSize
    Env.CellStream.Translator.SetUp Env, LocalKey
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsBackgroundColorReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-background-color"
    Const LocalProperty = "Interior.Color"
    
    Set Env.CellStream.Translator = New SsfTranslateColor
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsColorReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-color"
    Const LocalProperty = "Font.Color"
    
    Set Env.CellStream.Translator = New SsfTranslateColor
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsHAlignReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-h-align"
    Const LocalProperty = "HorizontalAlignment"
    
    Set Env.CellStream.Translator = New SsfTranslateCellHAlign
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsVAlignReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-v-align"
    Const LocalProperty = "VerticalAlignment"
    
    Set Env.CellStream.Translator = New SsfTranslateCellVAlign
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontNameReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-name"
    Const LocalProperty = "Font.Name"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsFontSizeReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-size"
    Const LocalProperty = "Font.Size"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsFontBoldReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-bold"
    Const LocalProperty = "Font.Bold"
    
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontItalicReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-italic"
    Const LocalProperty = "Font.Italic"
    
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsWrapReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-wrap"
    Const LocalProperty = "WrapText"
    
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsShrinkReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-shrink"
    Const LocalProperty = "ShrinkToFit"
    
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub WriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Dim AnArea As Range
    
    For Each AnArea In Target.Areas
        If Env.GetEnv("ssf", "enable-cells-formula", "true") Then CellsFormulaWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-numberformat", "true") Then CellsNumberFormatWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-wrap", "true") Then CellsWrapWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-shrink", "true") Then CellsShrinkWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-width", "true") Then CellsWidthWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-height", "true") Then CellsHeightWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-background-color", "true") Then CellsBackgroundColorWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-color", "true") Then CellsColorWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-font-name", "true") Then CellsFontNameWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-font-size", "true") Then CellsFontSizeWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-font-bold", "true") Then CellsFontBoldWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-font-italic", "true") Then CellsFontItalicWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-h-align", "true") Then CellsHAlignWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-v-align", "true") Then CellsVAlignWriteTo AnArea, Stream, Env
        If Env.GetEnv("ssf", "enable-cells-border", "true") Then CellsBorderWriteTo AnArea, Stream, Env
    Next
End Sub

Public Sub CellsFormulaWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-formula"
    Const LocalProperty = "Formula-Or-Value"
    Const EmptyValue = vbNullString
    
    Dim SafeCellText As Boolean
    SafeCellText = Env.GetEnv("ssf", "safe-cell-text", "false")
    
    If SafeCellText Then CellsSafeCellTextWriteTo Target, Stream, Env, True
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    If SafeCellText Then CellsSafeCellTextWriteTo Target, Stream, Env, False
End Sub

Public Sub CellsSafeCellTextWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources, _
        SafeOn As Boolean)
    ' temporally change cells-numberformat to force cells to store any texts safe
    Const LocalKey = "cells-numberformat"
    
    Dim Data As String
    Dim TextCells As Range
    Dim AnArea As Range
    Dim Count As Long
    
    On Error GoTo ErrorIsDone
    
    Data = IIf(SafeOn, "@", "General")
    Set TextCells = Target.SpecialCells(xlCellTypeConstants, xlTextValues)
    
    On Error GoTo NotDone
    
    Env.LogWrite LocalKey
    Stream.WriteLine SsfWriter.SsfBlockBegin(LocalKey)
    For Each AnArea In TextCells.Areas
        Stream.WriteLine SsfWriter.MakeSsfLine("address", SsfUtilsExcel.ExcelRangeToAddress(AnArea))
        Count = AnArea.Cells.Count
        If Count > 1 Then Stream.WriteLine SsfWriter.MakeSsfLine("repeat", Count)
        Stream.WriteLine SsfWriter.MakeSsfLine("", Data)
    Next
    Stream.WriteLine SsfWriter.SsfBlockEnd
    
ErrorIsDone:
    Exit Sub
    
NotDone:
    Env.LogWrite "CellsSafeCellTextWriteTo: Error " & Err.Number & " " & Err.Description
    Resume Next
End Sub

Public Sub CellsNumberFormatWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-numberformat"
    Const LocalProperty = "NumberFormat"
    Const EmptyValue = "General"
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
End Sub

Public Sub CellsWidthWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-width"
    Const LocalProperty = "ColumnWidth"
    
    Dim EmptyValue As Variant
    EmptyValue = Target.Worksheet.StandardWidth
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateSize
    Env.CellStream.Translator.SetUp Env, LocalKey
    CellsMakeSsfBlocks Target.Rows(1).Cells, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsHeightWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-height"
    Const LocalProperty = "RowHeight"
    
    Dim EmptyValue As Variant
    EmptyValue = Target.Worksheet.StandardHeight
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateSize
    Env.CellStream.Translator.SetUp Env, LocalKey
    CellsMakeSsfBlocks Target.Columns(1).Cells, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsBackgroundColorWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-background-color"
    Const LocalProperty = "Interior.Color"
    Const EmptyValue = 16777215 ' RGB(255, 255, 255)
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, "Interior.ColorIndex", XlColorIndex.xlColorIndexNone) Then Exit Sub
    ' Interior.Color returns "White" when multiple colors exist, not Null
    Set Env.CellStream.Translator = New SsfTranslateColor
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsColorWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-color"
    Const LocalProperty = "Font.Color"
    Const EmptyValue = 0    ' RGB(0, 0, 0)
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateColor
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsHAlignWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-h-align"
    Const LocalProperty = "HorizontalAlignment"
    Const EmptyValue = XlHAlign.xlHAlignGeneral
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellHAlign
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsVAlignWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-v-align"
    Const LocalProperty = "VerticalAlignment"
    Const EmptyValue = XlVAlign.xlVAlignBottom
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellVAlign
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontNameWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-name"
    Const LocalProperty = "Font.Name"
    
    Dim EmptyValue As Variant
    EmptyValue = Application.StandardFont
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
End Sub

Public Sub CellsFontSizeWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-size"
    Const LocalProperty = "Font.Size"
    
    Dim EmptyValue As Variant
    EmptyValue = Application.StandardFontSize
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
End Sub

Public Sub CellsFontBoldWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-bold"
    Const LocalProperty = "Font.Bold"
    Const EmptyValue = False
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontItalicWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-italic"
    Const LocalProperty = "Font.Italic"
    Const EmptyValue = False
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsWrapWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-wrap"
    Const LocalProperty = "WrapText"
    Const EmptyValue = False
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsShrinkWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-shrink"
    Const LocalProperty = "ShrinkToFit"
    Const EmptyValue = False
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsBorderWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-border"
    Const EmptyValue = XlLineStyle.xlLineStyleNone
    
    Dim LocalProperty As String
    Dim Border As Variant
    Dim BordersIndex As Variant
    
    BordersIndex = Array( _
        XlBordersIndex.xlEdgeTop, _
        XlBordersIndex.xlEdgeBottom, _
        XlBordersIndex.xlEdgeLeft, _
        XlBordersIndex.xlEdgeRight, _
        XlBordersIndex.xlDiagonalDown, _
        XlBordersIndex.xlDiagonalUp, _
        XlBordersIndex.xlInsideHorizontal, _
        XlBordersIndex.xlInsideVertical)
    
    For Each Border In BordersIndex
        LocalProperty = "Borders(" & CStr(Border) & ").LineStyle"
        If Not SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then
            'Set Env.CellStream.Translator = New SsfTranslateCellBoolean
            CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
            'Set Env.CellStream.Translator = Nothing
        End If
    Next
End Sub

Private Sub CellsParseSsfBlocks(Block As Variant, Env As GlobalResources, _
        LocalKey As String, LocalProperty As String)
    ' parse cells-* block
    Env.LogWrite LocalKey
    Env.CellStream.ReadFrom Block, LocalKey, LocalProperty
End Sub

Private Sub CellsMakeSsfBlocks(Target As Range, Stream As Object, Env As GlobalResources, _
        LocalKey As String, LocalProperty As String, EmptyValue As Variant)
    ' generate cells-* block
    Env.LogWrite LocalKey
    Env.CellStream.WriteTo Target, Stream, LocalKey, LocalProperty, EmptyValue
End Sub

'}}}

'ssf-end

