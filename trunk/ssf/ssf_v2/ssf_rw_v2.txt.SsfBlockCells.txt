'ssf-begin
';

'module
'   name;SsfBlockCells
'{{{
Option Explicit

Public Sub CellsFormulaReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-formula"
    Const LocalProperty = "FormulaR1C1"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsNumberFormatReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-numberformat"
    Const LocalProperty = "NumberFormat"
    
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
End Sub

Public Sub CellsHAlignReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-h-align"
    Const LocalProperty = "HorizontalAlignment"
    
    Set Env.CellStream.Translator = New SsfTranslateCellHAlign
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontBoldReadFrom(Block As Variant, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-bold"
    Const LocalProperty = "Font.Bold"
    
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsParseSsfBlocks Block, Env, LocalKey, LocalProperty
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub WriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Dim AnArea As Range
    
    For Each AnArea In Target.Areas
        CellsFormulaWriteTo AnArea, Stream, Env
        CellsNumberFormatWriteTo AnArea, Stream, Env
        CellsFontBoldWriteTo AnArea, Stream, Env
        CellsHAlignWriteTo AnArea, Stream, Env
    Next
End Sub

Public Sub CellsFormulaWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-formula"
    Const LocalProperty = "Formula-Or-Value"
    Const EmptyValue = Empty
    
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
End Sub

Public Sub CellsNumberFormatWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-numberformat"
    Const LocalProperty = "NumberFormat"
    Const EmptyValue = "General"
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
End Sub

Public Sub CellsHAlignWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-h-align"
    Const LocalProperty = "HorizontalAlignment"
    Const EmptyValue = XlHAlign.xlHAlignGeneral
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellHAlign
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Public Sub CellsFontBoldWriteTo(ByVal Target As Object, ByVal Stream As Object, ByVal Env As GlobalResources)
    Const LocalKey = "cells-font-bold"
    Const LocalProperty = "Font.Bold"
    Const EmptyValue = False
    
    If SsfUtilsExcel.IsEmptyCellProperty(Target, LocalProperty, EmptyValue) Then Exit Sub
    Set Env.CellStream.Translator = New SsfTranslateCellBoolean
    CellsMakeSsfBlocks Target, Stream, Env, LocalKey, LocalProperty, EmptyValue
    Set Env.CellStream.Translator = Nothing
End Sub

Private Sub CellsParseSsfBlocks(Block As Variant, Env As GlobalResources, _
        LocalKey As String, LocalProperty As String)
    ' parse cells-* block using ReadSsfCells
    Dim CrLf As String
    Dim Ws As Worksheet
    
    CrLf = Env.GetEnv("ssf", "line-end", vbCrLf)
    Set Ws = Env.Current("worksheet")
    
    Env.LogWrite LocalKey
    
    With Env.CellStream
        .PropertyName = LocalProperty
        .SetWorksheet Ws
        .ReadSsfCells Block, CrLf
    End With
End Sub

Private Sub CellsMakeSsfBlocks(Target As Range, Stream As Object, Env As GlobalResources, _
        LocalKey As String, LocalProperty As String, EmptyValue As Variant)
    ' generate cells-* block using WriteSsfBlocks
    Env.LogWrite LocalKey
    Stream.WriteLine SsfWriter.SsfBlockBegin(LocalKey)
    
    With Env.CellStream
        .PropertyName = LocalProperty
        .SetRange Target
        .ReadTargetCell EmptyValue
        .WriteSsfBlocks Stream
    End With
    
    Stream.WriteLine SsfWriter.SsfBlockEnd
End Sub

'}}}

'ssf-end

