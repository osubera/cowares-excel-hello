'ssf-begin
';

'module
'   name;SsfAction
'{{{
Option Explicit

Public Sub ReadFrom(BlockName, Block, Env)
    Select Case BlockName
    Case "cells-formula"
        SsfBlockCells.CellsFormulaReadFrom Block, Env
    Case "cells-name"
        SsfBlockWorkbook.CellsNameReadFrom Block, Env
    Case "cells-numberformat"
        SsfBlockCells.CellsNumberFormatReadFrom Block, Env
    Case "module", "class", "code"
        SsfBlockModules.ReadFrom Block, Env, BlockName
    Case "require"
        SsfBlockModules.ProjectRequiresReadFrom Block, Env
    Case "workbook"
        SsfBlockWorkbook.ReadFrom Block, Env
    Case "worksheet"
        SsfBlockWorksheet.ReadFrom Block, Env
    Case "columns-width"
        SsfBlockColumnsWidth.ReadFrom Block, Env
    End Select
End Sub

Public Sub WriteTo(Stream, Env)
    Dim Target As Object
    
    Set Target = Env.Current("target")
    Select Case Env.Current("target-type")
    Case "Workbook"
        SsfBlockWorkbook.WriteTo Target, Stream, Env
    Case "Worksheet"
        SsfBlockWorksheet.WriteTo Target, Stream, Env
    Case "Range"
        SsfBlockCells.WriteTo Target, Stream, Env
    Case "VBProject"
        SsfBlockModules.WriteTo Target, Stream, Env
    Case "CodeModule"
        If SsfBlockModules.ShallDumpModule(Target, Env) Then
            SsfBlockModules.VbaCodeModuleWriteTo Target.VBProject.VBE.ActiveCodePane.CodeModule, Stream, Env
        End If
    Case Else
        Env.LogWrite "SsfAction.WriteTo: unknown type: " & TypeName(Target)
    End Select
End Sub

'}}}

'ssf-end

