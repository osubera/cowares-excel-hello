'ssf-begin
';

'module
'   name;SsfUtilsExcel
'{{{
Option Explicit

Private BookTool As SsfUtilsExcelBook

Public Function OpenBookTool() As SsfUtilsExcelBook
    If BookTool Is Nothing Then Set BookTool = New SsfUtilsExcelBook
    Set OpenBookTool = BookTool
End Function

Public Function CloseBookTool() As Object
    If Not BookTool Is Nothing Then Set BookTool = Nothing
    Set CloseBookTool = Nothing
End Function

Public Function ExcelAddressToRange(Ws As Worksheet, ByVal A1orR1C1 As String, _
        Optional FailSafe As Object = Nothing) As Range
    Dim TryR1C1 As String
    
    On Error Resume Next
    Set ExcelAddressToRange = Ws.Range(A1orR1C1)
    If Err.Number = 0 Then Exit Function
    Err.Clear
    
    TryR1C1 = OpenBookTool.R1C1ToA1(A1orR1C1)
    If TryR1C1 <> A1orR1C1 Then
        Set ExcelAddressToRange = Ws.Range(TryR1C1)
        If Err.Number = 0 Then Exit Function
        Err.Clear
    End If
    
    Set ExcelAddressToRange = FailSafe
End Function

Public Function ExcelRangeToAddress(Ra As Range) As String
    ExcelRangeToAddress = Ra.Address(False, False, xlA1, False)
End Function

' this function is required to avoid overflow errors on excel 2007 Cells.Count
Public Function IsASingleCell(Target As Range) As Boolean
    On Error GoTo MayFailOnExcel2007
    
    IsASingleCell = (Target.Cells.Count = 1)
    Exit Function
    
MayFailOnExcel2007:
    If Err.Number = 6 Then
        ' overflowed, means very large, larger than 1, maybe
        IsASingleCell = False
        Exit Function
    Else
        Err.Raise Err.Number
    End If
End Function

Public Function IsValidAreaNumber(Target As Range, ByVal Number As Long) As Boolean
    IsValidAreaNumber = False
    
    If Target Is Nothing Then Exit Function
    If Number <= 0 Then Exit Function
    If Number > Target.Areas.Count Then Exit Function
    
    IsValidAreaNumber = True
End Function

Public Function IsInsideCell(Target As Range, ByVal Number As Variant) As Boolean
    On Error GoTo MayFailOnExcel2007
    IsInsideCell = False
    
    On Error Resume Next
    If Target Is Nothing Then Exit Function
    If Number <= 0 Then Exit Function
    If Number > Target.Cells.Count Then Exit Function
    
    IsInsideCell = True
    Exit Function
    
MayFailOnExcel2007:
    If Err.Number = 6 Then
        If Number > CDec(Target.Cells.CountLarge) Then Exit Function
        IsInsideCell = True
        Exit Function
    Else
        Err.Raise Err.Number
    End If
End Function

Public Function TranslateDotProperties(Origin As Object, ByRef Key As String) As Object
    Dim Receiver As Object
    Dim DotProperties As Variant
    Dim MayHaveIndex As Variant
    
    Set Receiver = Origin
    Do
        DotProperties = Split(Key, ".", 2)
        If UBound(DotProperties) = 0 Then Exit Do
        MayHaveIndex = Split(DotProperties(0), "(", 2)
        Set Receiver = CallByName(Receiver, MayHaveIndex(0), VbGet)
        If UBound(MayHaveIndex) = 1 Then Set Receiver = Receiver(Val(MayHaveIndex(1)))
        Key = DotProperties(1)
    Loop
    
    Set TranslateDotProperties = Receiver
End Function

Public Function IsEmptyCellProperty(Target As Range, ByVal PropertyName As String, _
        Optional EmptyValue As Variant = Empty) As Boolean
    Dim Receiver As Object
    Dim AllValues As Variant
    Dim out As Boolean
    
    Set Receiver = TranslateDotProperties(Target, PropertyName)
    AllValues = CallByName(Receiver, PropertyName, VbGet)
    
    If IsNull(AllValues) Then
        out = False
    Else
        out = (AllValues = EmptyValue)
    End If
    
    IsEmptyCellProperty = out
End Function

Public Function TranslateCellValues(Data As Variant, FilterClass As Object, FilterName As String) As Variant
    Dim out() As Variant
    Dim R As Long
    Dim C As Long
    Dim R1 As Long
    Dim R2 As Long
    Dim C1 As Long
    Dim C2 As Long
    
    If IsArray(Data) Then
        R1 = LBound(Data, 1)
        R2 = UBound(Data, 1)
        C1 = LBound(Data, 2)
        C2 = UBound(Data, 2)
        ReDim out(R1 To R2, C1 To C2)
        For R = R1 To R2
            For C = C1 To C2
                out(R, C) = CallByName(FilterClass, FilterName, VbMethod, Data(R, C))
            Next
        Next
        TranslateCellValues = out
    Else
        TranslateCellValues = CallByName(FilterClass, FilterName, VbMethod, Data)
    End If
End Function

'}}}

'ssf-end

