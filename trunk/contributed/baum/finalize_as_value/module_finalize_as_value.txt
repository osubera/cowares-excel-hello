'module
'  name;FinalizeAsValue
'{{{
Option Explicit

Public Sub FinalizeAsValue(ByVal iSelect As Long, ByVal iExternal As Long, ByVal bVerbose As Boolean)
    Dim hWnd As Long
    Dim Data As Variant
    
    hWnd = 0
    If bVerbose Then hWnd = OpenNotepad(vbNormalNoFocus, BaumMain.Name)
    
    For Each Data In FindFormulas(iSelect, iExternal)
        FinalizeData Data, hWnd
    Next
    
    If bVerbose Then SetSavedNotepad hWnd
End Sub


'=== finalize begin ===


Private Sub FinalizeData(Data As Variant, Optional hWnd As Long = 0)
    Dim Ra As Range
    Dim ValueType As Long
    
    ValueType = ExtractData(Data, Ra)
    
    If hWnd <> 0 Then
        If ValueType = -1 Then
            WriteLineNotepad hWnd, DumpWorksheet(Ra.Worksheet)
        Else
            WriteLineNotepad hWnd, DumpCellsFormula(Ra)
            WriteLineNotepad hWnd, DumpCellsText(Ra)
        End If
    End If
    
    Select Case ValueType
    Case xlNumbers Or xlLogical ' 1 or 4 = 5
        FinalizeRangeValue Ra
    Case xlTextValues           ' 2
        FinalizeRangeText Ra
    Case xlErrors               ' 16
        FinalizeRangeError Ra
    End Select
End Sub

Private Sub FinalizeRangeValue(Ra As Range)
    Ra.Formula = Ra.Value
End Sub

Private Sub FinalizeRangeText(Ra As Range)
    Dim x As Variant
    Dim r As Long
    Dim c As Long
    
    x = Ra.Value
    If IsArray(x) Then
        For r = 1 To UBound(x, 1)
            For c = 1 To UBound(x, 2)
                x(r, c) = "'" & x(r, c)
            Next
        Next
    Else
        x = "'" & x
    End If
    Ra.Formula = x
End Sub

Private Sub FinalizeRangeError(Ra As Range)
    Dim x As Variant
    Dim r As Long
    Dim c As Long
    
    x = Ra.Value
    If IsArray(x) Then
        For r = 1 To UBound(x, 1)
            For c = 1 To UBound(x, 2)
                x(r, c) = TranslateError(x(r, c))
            Next
        Next
    Else
        x = TranslateError(x)
    End If
    Ra.Formula = x
End Sub

Private Function TranslateError(x As Variant) As String
    Dim a As Variant
    Static Dic As Variant
    
    If IsEmpty(Dic) Then
        Dic = Array( _
                Array(CVErr(xlErrDiv0), "#DIV/0!"), _
                Array(CVErr(xlErrNA), "#N/A"), _
                Array(CVErr(xlErrName), "#NAME?"), _
                Array(CVErr(xlErrNull), "#NULL!"), _
                Array(CVErr(xlErrNum), "#NUM!"), _
                Array(CVErr(xlErrRef), "#REF!"), _
                Array(CVErr(xlErrValue), "#VALUE!") _
            )
    End If
    
    For Each a In Dic
        If x = a(0) Then
            TranslateError = a(1)
            Exit Function
        End If
    Next
    
    TranslateError = "#ERROR!"
End Function

Private Function DumpWorksheet(Ws As Worksheet) As String
    Dim Result As String
    
    Result = "'worksheet" & vbCrLf
    Result = Result & "'  name;" & Ws.Name
    ' avoid to print the default codename
    If Ws.Name <> Ws.CodeName Then
        Result = Result & "/" & Ws.CodeName
    End If
    Result = Result & vbCrLf    ' end of name line
    Result = Result & vbCrLf    ' end of worksheet block
    
    DumpWorksheet = Result
End Function

Private Function DumpCellsFormula(Ra As Range) As String
    Dim Result As String
    Dim Ce As Range
    
    Result = "'cells-formula" & vbCrLf
    Result = Result & "'  address;" & Ra.Address(False, False, xlA1, False) & vbCrLf
    ' simple list, each cell in each line
    For Each Ce In Ra
        Result = Result & "'         ;" & Ce.Formula & vbCrLf
    Next
    Result = Result & vbCrLf
    
    DumpCellsFormula = Result
End Function

Private Function DumpCellsText(Ra As Range) As String
    Dim Result As String
    Dim Ce As Range
    
    Result = "'cells-text" & vbCrLf
    Result = Result & "'  address;" & Ra.Address(False, False, xlA1, False) & vbCrLf
    ' simple list, each cell in each line
    For Each Ce In Ra
        Result = Result & "'         ;" & Ce.Text & vbCrLf
    Next
    Result = Result & vbCrLf
    
    DumpCellsText = Result
End Function


'=== finalize end ===
'=== find external link begin ===


' expect a single cell as an argument
' return 1 : no external precedents
'        2 : refer another sheet in a same book
'        3 : refer another book
Private Function ExternalLevelOfFormula(Ce As Range) As Long
    Dim PureFormula As String
    Dim out As Long
    
    PureFormula = RemoveStringConstants(Ce.Formula)
    If HasBrackets(PureFormula) Then
        out = 3
    ElseIf HasExclamation(PureFormula) Then
        out = 2
    Else
        out = 1
    End If
    
    ExternalLevelOfFormula = out
End Function

Private Function RemoveStringConstants(Text As String) As String
    Static r As VBScript_RegExp_55.RegExp
    
    If r Is Nothing Then
        Set r = New VBScript_RegExp_55.RegExp
        r.Global = True
        r.IgnoreCase = False
        r.MultiLine = False
        r.Pattern = """[^""]*"""
    End If
    
    RemoveStringConstants = r.Replace(Text, "")
End Function

Private Function HasExclamation(Text As String) As Boolean
    Static r As VBScript_RegExp_55.RegExp
    
    If r Is Nothing Then
        Set r = New VBScript_RegExp_55.RegExp
        r.Global = True
        r.IgnoreCase = False
        r.MultiLine = False
        r.Pattern = "!"
    End If
    
    HasExclamation = r.test(Text)
End Function

Private Function HasBrackets(Text As String) As Boolean
    Static r As VBScript_RegExp_55.RegExp
    
    If r Is Nothing Then
        Set r = New VBScript_RegExp_55.RegExp
        r.Global = True
        r.IgnoreCase = False
        r.MultiLine = False
        r.Pattern = "\[.+\]"
    End If
    
    HasBrackets = r.test(Text)
End Function


'=== find external link end ===
'=== find formulas begin ===


Private Function FindFormulas(ByVal iSelect As Long, ByVal iExternal As Long) As Collection
    Dim out As Collection
    Dim Ws As Worksheet
    Dim x As Variant
    
    Select Case iSelect
    Case 3  '"Workbook"
        Set out = New Collection
        For Each Ws In ActiveWorkbook.Worksheets
            out.Add MakeData(-1, Ws.Cells(1))   ' dummy record to give a sheet name
            For Each x In MakeFormulasArray(Ws.Cells, iExternal)
                out.Add x
            Next
        Next
    Case 2  '"Worksheet"
        Set out = MakeFormulasArray(ActiveSheet.Cells, iExternal)
    Case 1  '"Range"
        Set out = MakeFormulasArray(Selection, iExternal)
    End Select
    
    Set FindFormulas = out
End Function

Private Function MakeFormulasArray(Ce As Range, ByVal iExternal As Long) As Collection
    Dim out As Collection
    Dim Data As Object
    Dim Item As Variant
    Dim ValueTypes As Variant
    Dim ValueType As Variant
    
    Set out = New Collection
    
    ValueTypes = Array(xlNumbers Or xlLogical, xlTextValues, xlErrors)
    
    For Each ValueType In ValueTypes
        Set Data = MakeFormulasRangeArray(Ce, iExternal, ValueType)
        For Each Item In Data
            out.Add MakeData(ValueType, Item)
        Next
    Next
    
    Set MakeFormulasArray = out
End Function

Private Function MakeFormulasRangeArray(Ce As Range, ByVal iExternal As Long, ByVal ValueType As Long) As Object
    On Error GoTo TrapNoFormulas
    
    Dim out As Object
    Dim Ra As Range
    Dim Rb As Range
    
    Set out = New Collection    ' as a blank array object
    
    Set Ra = Ce.SpecialCells(xlCellTypeFormulas, ValueType)
    
    If iExternal = 1 Then
        Set out = Ra.Areas
    Else
        For Each Rb In Ra.Cells
            If ExternalLevelOfFormula(Rb) >= iExternal Then
                out.Add Rb
            End If
        Next
    End If
    
    Set MakeFormulasRangeArray = out
    Exit Function
    
TrapNoFormulas:
    If Err.Number = 1004 Then
        Set MakeFormulasRangeArray = out
        Exit Function
    Else
        Err.Raise Err.Number
    End If
End Function


'=== find formulas end ===
'=== data structure begin ===


Private Function MakeData(ByVal ValueType As Long, ByVal Ce As Range) As Variant
    MakeData = Array(ValueType, Ce)
End Function

Private Function ExtractData(Data As Variant, ByRef Ce As Range) As Long
    ExtractData = Data(0)
    Set Ce = Data(1)
End Function


'=== data structure end ===
'}}}


