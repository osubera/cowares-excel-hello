'ssf-begin
';

'workbook
'   name;book_tab_2k.xls/VBAProject

'book-identity
'  title;☆

'require
'       ;{420B2830-E718-11CF-893D-00A0C9054228} 1 0 Microsoft Scripting Runtime

'cells-name
'       ;=ブックタブみたいな!R15C1
'       ;ブックタブみたいな!_ButtonCaption
'       ;=ブックタブみたいな!R3C2
'       ;ブックタブみたいな!_Comment
'       ;=ブックタブみたいな!R6C2
'       ;ブックタブみたいな!_Contributor
'       ;=ブックタブみたいな!R4C2
'       ;ブックタブみたいな!_Copyright
'       ;=ブックタブみたいな!R17C1:R22C10
'       ;ブックタブみたいな!_FileButtons
'       ;=ブックタブみたいな!R5C2
'       ;ブックタブみたいな!_License
'       ;=ブックタブみたいな!R2C2
'       ;ブックタブみたいな!_LocalComment
'       ;=ブックタブみたいな!R1C2
'       ;ブックタブみたいな!_PublicName
'       ;=ブックタブみたいな!R7C2
'       ;ブックタブみたいな!_Since
'       ;=ブックタブみたいな!R10C2
'       ;ブックタブみたいな!_Tag
'       ;=ブックタブみたいな!R9C2
'       ;ブックタブみたいな!_Timestamp
'       ;=ブックタブみたいな!R8C2
'       ;ブックタブみたいな!_Url

'worksheet
'   name;ブックタブみたいな/BaumMain

'cells-formula
'  address;A1:B10
'         ;名称
'         ;book_tab
'         ;コメント
'         ;ブックタブみたいな
'         ;comment
'         ;something like book tabs
'         ;著作権
'         ;="Copyright (C) " &R[3]C & "-" & YEAR(R[5]C) & " " & R[2]C
'         ;ライセンス
'         ;自律, 自由, 公正, http://cowares.nobody.jp
'         ;作者
'         ;Tomizono - kobobau.com
'         ;初版
'         ;2011
'         ;配布元
'         ;http://cowares.blogspot.com/search/label/baum
'         ;更新
'         ;40611.6463541667
'         ;keyword
'         ;vba,excel
'  address;A13:J13
'         ;ボタンの表示
'         ;ボタンの機能
'         ;Tag
'         ;Parameter
'         ;ControlType
'         ;Style
'         ;Width
'         ;Group
'         ;Action
'         ;Initialize ..
'  address;A15:E15
'         ;❤
'         ;全体の操作
'         ;file
'     skip;1
'         ;10
'  address;A17:J22
'         ;同期
'         ;ブック一覧を再確認する。
'         ;sync
'     skip;1
'         ;1
'     skip;5
'         ;保存済みを閉じる
'         ;未保存を除き、ブックを閉じる。
'         ;close_saved
'     skip;4
'         ;1
'     skip;2
'         ;アクティブ以外破棄
'         ;アクティブブックを除き、未保存の情報を破棄して閉じる。
'         ;close_unactives
'     skip;7
'         ;タイトル優先
'         ;最初にタブを開いたとき、ファイル名でなくタイトルを表示する。
'         ;prefer_title
'     skip;1
'         ;1
'     skip;2
'         ;1
'     skip;1
'         ;1
'         ;タイトル入力
'         ;タイトルが無いブックにタイトルを入れるよう促す。
'         ;input_title
'     skip;1
'         ;1
'     skip;4
'         ;1
'         ;=R1C2 & " について"
'         ;このシートを表示する。
'         ;about
'     skip;1
'         ;1
'         ;2
'     skip;1
'         ;1
'  address;B27
'         ;エクセルブック、ワード、アクセスのカスタムメイドやウェブシステムの開発などをリーズナブルな価格で承っております。
'  address;C30:G36
'         ;導入する利点
'     skip;1
'         ;発注について
'     skip;2
'         ;事業者で
'     skip;1
'         ;発注から公開まで
'     skip;1
'         ;プライバシー
'         ;大企業で
'     skip;1
'         ;料金
'     skip;1
'         ;取引上の注意
'         ;公益法人で
'     skip;1
'         ;公開（納品）
'     skip;2
'         ;個人で
'     skip;1
'         ;基本的なルール
'     skip;2
'         ;IT企業で
'     skip;1
'         ;細かいルール
'     skip;4
'         ;なぜ無料ソフトを買う？
'  address;C38
'         ;すぐに注文する
'  address;B42
'         ;簡単な指示、安い料金、早い結果
'  address;B44
'         ;料金 - コ・ウェア・ライセンスのシステム開発
'  address;B46
'         ;基本料金表
'  address;B48:B49
'         ;３つのサイズから選ぶだけで簡単。
'         ;前払いが原則。
'  address;B51:D53
'         ;Sサイズ
'         ;1,000円
'         ;（税込 1,050円）
'         ;Mサイズ
'         ;10,000円
'         ;（税込 10,500円）
'         ;Lサイズ
'         ;100,000円
'         ;（税込 105,000円）
'  address;B55
'         ;サイズとは
'  address;B57
'         ;開発にかかる時間や難易度を、おおまかに３つのサイズで分類します。
'  address;B59
'         ;Sサイズ
'  address;B61:C65
'         ;1. 小型、 Small 、 partial
'     skip;1
'         ;2. ちょっとしたコード素片や、ワークシートの一部分など。
'     skip;1
'         ;3. 手に負えない、書き方のわからないコードだけを知りたいときに。
'     skip;1
'         ;4. 例）数行の VBA コード。次のリンク先の１つ目のコード
'     skip;2
'         ;http://code.google.com/p/cowares-excel-hello/wiki/hello_key_value
'  address;B67
'         ;Mサイズ
'  address;B69:C73
'         ;1. 中型、 Medium 、 functional
'     skip;1
'         ;2. 完成した関数やワークシート。
'     skip;1
'         ;3. 単一の機能が、とりあえず動くレベルのものが欲しいときに。
'     skip;1
'         ;4. 例）マクロを実行すれば一つの動作を行う VBA コード。
'     skip;2
'         ;http://code.google.com/p/cowares-excel-hello/wiki/annual_list
'  address;B75
'         ;Lサイズ
'  address;B77:B80
'         ;1. 大型、 Large 、 integrated
'         ;2. 実用的なアプリケーション。
'         ;3. 複数の機能や、条件設定による動作切り替えや画面遷移も含むときに。
'         ;4. 例）ユーザーインターフェースを持ち、ツールとして利用できる。
'  address;B84
'         ;公開 - コ・ウェア・ライセンスのシステム開発
'  address;B86
'         ;公開が納品です
'  address;B88:B95
'         ;所定の公開場所に成果物をアップロードする方法を採ります。
'         ;仕様を決める段階から公開URLを使います。
'         ;公開のタイミングで連絡はしますが、ファイル添付などはしません。
'         ;公開先からのセルフダウンロードでお願いします。
'         ;本人はもちろん、同僚や友達、その他大勢の人がダウンロードして利用できます。
'         ;マクロコードをテキストで公開するので、セキュリティの強い職場で、マクロ付きブックのダウンロード規制がある環境でも心配ありません。
'         ;公開後のコード修正等、追加情報も当該URLから派生していきます。
'         ;URLは永久に変わらないものではありません。
'  address;B97
'         ;主な公開先URL
'  address;B99:B100
'         ;http://cowares.blogspot.com
'         ;http://code.google.com/p/cowares-excel-hello/
'  address;B104
'         ;なぜ無料ソフトを買うのか？ - コ・ウェア・ライセンスのシステム開発
'  address;B106
'         ;そのお金は何に払っているのでしょうか
'  address;B108:G108
'         ;無料のもの
'     skip;1
'         ;買うもの
'     skip;2
'         ;買わないもの
'  address;B110:G113
'         ;ライセンス
'     skip;1
'         ;エンジニアの働き
'     skip;2
'         ;保証
'         ;コピー
'     skip;1
'         ;世界への貢献
'     skip;2
'         ;役員の働き
'     skip;5
'         ;事務員の働き
'     skip;5
'         ;営業スマイル
'  address;C115:D116
'     skip;1
'         ;コ・ウェアの料金
'         ;通常のシステム開発で払うお金
'  address;C120
'         ;すぐに注文する

'cells-numberformat
'  address;B9
'         ;m/d/yyyy h:mm

'cells-width
'   unit;pt
'  address;B1
'         ;96.75

'cells-height
'   unit;pt
'  address;A27
'         ;14.25
'  address;A38
'         ;24.75
'  address;A44
'         ;21
'  address;A46
'         ;14.25
'  address;A50:A51
'   repeat;2
'         ;14.25
'  address;A53:A55
'   repeat;3
'         ;14.25
'  address;A84
'         ;21
'  address;A86
'         ;14.25
'  address;A97
'         ;14.25
'  address;A104
'         ;21
'  address;A106
'         ;14.25
'  address;A120
'         ;24.75

'cells-background-color
'  address;A27:M27
'   repeat;13
'         ;#FF6600
'  address;C30:H30
'   repeat;2
'         ;#FFCC99
'   repeat;4
'         ;#CCFFCC
'  address;C38:F38
'   repeat;4
'         ;#99CC00
'  address;B44:L44
'   repeat;11
'         ;#333399
'  address;B51:B53
'         ;#CCFFCC
'         ;#FFFF99
'         ;#FFCC99
'  address;B59
'         ;#CCFFCC
'  address;B67
'         ;#FFFF99
'  address;B75
'         ;#FFCC99
'  address;B84:L84
'   repeat;11
'         ;#333399
'  address;B104:L104
'   repeat;11
'         ;#333399
'  address;B108:H108
'   repeat;2
'         ;#FF99CC
'   repeat;2
'         ;#CCFFCC
'   repeat;3
'         ;#FF99CC
'  address;B115:H116
'     skip;2
'   repeat;2
'         ;#00FF00
'     skip;3
'   repeat;7
'         ;#FF00FF
'  address;C120:F120
'   repeat;4
'         ;#99CC00

'cells-color
'  address;C31:G36
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;1
'   repeat;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;1
'   repeat;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;2
'         ;#0000FF
'     skip;1
'         ;#0000FF
'     skip;4
'         ;#0000FF
'  address;C38:F38
'   repeat;4
'         ;#0000FF
'  address;B42
'         ;#FF00FF
'  address;B44:L44
'   repeat;11
'         ;#FFCC00
'  address;C64:J65
'     skip;2
'   repeat;14
'         ;#0000FF
'  address;C73:H73
'   repeat;6
'         ;#0000FF
'  address;B84:L84
'   repeat;11
'         ;#FFCC00
'  address;B99:B100
'   repeat;2
'         ;#0000FF
'  address;B104:L104
'   repeat;11
'         ;#FFCC00
'  address;C120:F120
'   repeat;4
'         ;#0000FF

'cells-font-size
'  address;B27
'         ;12
'  address;C38:F38
'   repeat;4
'         ;12
'  address;B44
'         ;18
'  address;B46
'         ;12
'  address;B55
'         ;12
'  address;B84
'         ;18
'  address;B86
'         ;12
'  address;B97
'         ;12
'  address;B104
'         ;18
'  address;B106
'         ;12
'  address;C120:F120
'   repeat;4
'         ;12

'cells-font-bold
'  address;B27
'         ;yes
'  address;C38:F38
'   repeat;4
'         ;yes
'  address;B44
'         ;yes
'  address;B46
'         ;yes
'  address;B51:B53
'   repeat;3
'         ;yes
'  address;B55
'         ;yes
'  address;B59
'         ;yes
'  address;B67
'         ;yes
'  address;B75
'         ;yes
'  address;B84
'         ;yes
'  address;B86
'         ;yes
'  address;B97
'         ;yes
'  address;B104
'         ;yes
'  address;B106
'         ;yes
'  address;B108:G108
'         ;yes
'     skip;1
'   repeat;2
'         ;yes
'     skip;1
'         ;yes
'  address;C120:F120
'   repeat;4
'         ;yes

'cells-h-align
'  address;C38:F38
'   repeat;4
'         ;center
'  address;C51:C53
'   repeat;3
'         ;right
'  address;C64:J65
'     skip;2
'   repeat;6
'         ;center
'   repeat;7
'         ;left
'         ;center
'  address;C73:H73
'   repeat;6
'         ;left
'  address;D108:E108
'   repeat;2
'         ;center
'  address;D115:E115
'   repeat;2
'         ;center
'  address;C120:F120
'   repeat;4
'         ;center

'cells-v-align
'  address;C38:F38
'   repeat;4
'         ;center
'  address;B46:J80
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;4
'         ;center
'     skip;1
'   repeat;6
'         ;center
'     skip;1
'   repeat;14
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;4
'   repeat;5
'         ;center
'     skip;4
'   repeat;6
'         ;center
'     skip;2
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'     skip;3
'   repeat;6
'         ;center
'  address;B84:G100
'   repeat;102
'         ;center
'  address;B104:B106
'   repeat;3
'         ;center
'  address;B108:G116
'   repeat;11
'         ;center
'     skip;1
'   repeat;28
'         ;center
'     skip;2
'   repeat;4
'         ;center
'     skip;2
'   repeat;4
'         ;center
'  address;C120:F120
'   repeat;4
'         ;center

'class
'   name;ToolBarV2
'{{{
Option Explicit

' Generate an application toolbar

Private MyBar As Office.CommandBar
Private MyName As String
Private MyApp As Application


'=== main procedures helper begin ===


' this will called by pressing a button
Friend Sub BarMain(Optional oWho As Object = Nothing)
    Dim oAC As Object   ' this is the button itself pressed
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    ' switch to a main menu procedure
    Main oAC, SomebodyOrMe(oWho)
    Set oAC = Nothing
End Sub

' main menu procedure. if you delete this, a public Main in Standard Module will be called, maybe.
Private Sub Main(oAC As Object, Optional oWho As Object = Nothing)
    ' use a button tag to switch a procedure to be called as "Menu_xx"
    CallByName SomebodyOrMe(oWho), "Menu_" & oAC.Tag, VbMethod, oAC
End Sub

Public Sub Menu_about(oAC As Object)
    MsgBox TypeName(Me), vbOKOnly, "Sample of procedure called by the Main"
End Sub

Friend Sub OnButtonToggle()
    Dim oAC As Object   ' toggle this button
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    
    ButtonSwitchToggle oAC
    Set oAC = Nothing
End Sub

Private Function SomebodyOrMe(oWho As Object) As Object
    If oWho Is Nothing Then
        Set SomebodyOrMe = Me
    Else
        Set SomebodyOrMe = oWho
    End If
End Function


'=== main procedures helper end ===
'=== event procedures begin ===


Private Sub Class_Initialize()
    Set MyApp = Application
    MyName = CStr(Timer)    ' random name, maybe uniq
End Sub

Private Sub Class_Terminate()
    Set MyApp = Nothing
End Sub


'=== event procedures end ===
'=== construction and destruction begin ===


Public Sub NewBar(ParamArray Addins() As Variant)
    DelBar
    Set MyBar = CreateBar(MyApp, MyName)
    AddAddins MyBar, CVar(Addins)
    ShowBar MyBar
End Sub

Public Sub DelBar()
    DeleteBar MyBar
    Set MyBar = Nothing
End Sub

Public Sub SetApplication(oApp As Application)
    Set MyApp = oApp
End Sub

Public Sub SetName(NewName As String)
    MyName = NewName
End Sub

Public Property Get Bar() As Office.CommandBar
    Set Bar = MyBar
End Property


'=== construction and destruction end ===
'=== bar generator begin ===


Public Function CreateBar(oApp As Application, BarName As String) As Office.CommandBar
    RemoveExistingBar oApp, BarName
    Set CreateBar = oApp.CommandBars.Add(Name:=BarName, Temporary:=True)
End Function

Public Sub RemoveExistingBar(oApp As Application, BarName As String)
    On Error Resume Next
    oApp.CommandBars(BarName).Delete
End Sub

Public Sub DeleteBar(Bar As Object)
    On Error Resume Next
    Bar.Delete
End Sub

Public Sub ShowBar(Bar As Object, Optional Position As Long = msoBarTop, Optional Height As Long = 0)
    Bar.Visible = True
    Bar.Position = Position
    If Height > 0 Then Bar.Height = Bar.Height * Height
End Sub


'=== bar generator end ===
'=== handle addins begin ===


Public Function WithAddins(ParamArray Addins() As Variant) As Long
    WithAddins = AddAddins(MyBar, CVar(Addins))
End Function

Public Function AddAddins(Bar As Object, Addins As Variant) As Long
    Dim Addin As Variant
    Dim LastButtonIndex As Long
    
    For Each Addin In Addins
        LastButtonIndex = AddButtons(Bar, Addin.ButtonData, Addin.ButtonParent)
    Next
    
    AddAddins = LastButtonIndex
End Function


'=== handle addins end ===
'=== button generator begin ===


Public Function AddButtons(Bar As Object, Data As Variant, Parent As Variant) As Long
    Dim LastButtonIndex As Long
    Dim SingleData As Variant
    
    For Each SingleData In Data
        LastButtonIndex = Add(Bar, MakeAButtonData(SingleData, Parent))
    Next
    
    AddButtons = LastButtonIndex
End Function

Public Function Add(Bar As Object, Data As Variant) As Long
    Dim ButtonA As CommandBarControl
    
    Set ButtonA = Bar.Controls.Add(Type:=ButtonControlType(Data), Temporary:=True)
    With ButtonA
        Select Case ButtonControlType(Data)
        Case msoControlEdit                         '2      ' textbox
        Case msoControlDropdown, msoControlComboBox '3, 4   ' list and combo
            SetButtonItems ButtonA, Data
            SetButtonStyle ButtonA, Data
        Case msoControlPopup                        '10     ' popup
            SetButtonPopup ButtonA, Data
        Case msoControlButton                       '1      ' Button
            SetButtonStyle ButtonA, Data
            SetButtonState ButtonA, Data
        End Select
        SetButtonWidth ButtonA, Data
        SetButtonGroup ButtonA, Data
        .OnAction = ButtonAction(Data)
        .Caption = ButtonCaption(Data)
        .TooltipText = ButtonDescription(Data)
        .Tag = ButtonTag(Data)
        .Parameter = ButtonParameter(Data)
    End With
    
    Add = ButtonA.Index
    Set ButtonA = Nothing
End Function

Public Sub Remove(Bar As Object, Items As Variant)
    On Error Resume Next
    Dim Item As Variant
    
    If IsArray(Item) Then
        For Each Item In Items
            Remove Bar, Item
        Next
    Else
        Bar.Controls(Item).Delete
    End If
End Sub


'=== button generator end ===
'=== button data structure begin ===


' generator / selector

' Data(): Array of button data
' Parent(): Array of button parent information (bar and properties)
'           Parent(0) is reserved for addin key


Public Function MakeAButtonData(Data As Variant, Parent As Variant) As Variant
    MakeAButtonData = Array(NormalizeArray(Data), Parent)
End Function

Public Function DataAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    DataAButtonData = AButtonData(0)
End Function

Public Function ParentAButtonData(AButtonData As Variant) As Variant
    On Error Resume Next
    ParentAButtonData = AButtonData(1)
End Function

Public Function KeyAButtonData(AButtonData As Variant) As String
    On Error Resume Next
    KeyAButtonData = ParentAButtonData(AButtonData)(0)
End Function

Public Function ItemAButtonData(AButtonData As Variant, ByVal Item As Long, _
            Optional FallBack As Variant = Empty) As Variant
    On Error Resume Next
    Dim out As Variant
    
    out = DataAButtonData(AButtonData)(Item)
    If IsEmpty(out) Then out = FallBack
    
    ItemAButtonData = out
End Function


'=== button data structure end ===
'=== button data struncture detail begin ===


Public Function ButtonCaption(Data As Variant) As String
    ButtonCaption = ItemAButtonData(Data, 0)
End Function

Public Function ButtonDescription(Data As Variant) As String
    ButtonDescription = ItemAButtonData(Data, 1)
End Function

Public Function ButtonTag(Data As Variant) As String
    ButtonTag = ItemAButtonData(Data, 2, ButtonCaption(Data))
End Function

Public Function ButtonParameter(Data As Variant) As String
    ButtonParameter = ItemAButtonData(Data, 3)
End Function

Public Function ButtonControlType(Data As Variant) As Long
    'MsoControlType
    On Error Resume Next
    ButtonControlType = Val(ItemAButtonData(Data, 4, msoControlButton))
End Function

Public Function ButtonStyle(Data As Variant) As Long
    'MsoButtonStyle
    On Error Resume Next
    ButtonStyle = Val(ItemAButtonData(Data, 5, msoButtonCaption))
End Function

Public Function ButtonWidth(Data As Variant) As Long
    ' we use 45 units here
    On Error Resume Next
    Const UnitWidth = 45
    ButtonWidth = Val(ItemAButtonData(Data, 6)) * UnitWidth
End Function

Public Function ButtonGroup(Data As Variant) As Boolean
    ' put group line on its left
    ButtonGroup = Not IsEmpty(ItemAButtonData(Data, 7))
End Function

Public Function ButtonAction(Data As Variant) As String
    On Error Resume Next
    ' Standard Method Name to be kicked with the button
    Const BarMain = "BarMain"
    Dim FullName As String
    
    If KeyAButtonData(Data) = "" Then
        FullName = BarMain
    Else
        FullName = KeyAButtonData(Data) & "." & BarMain
    End If
    
    ButtonAction = ItemAButtonData(Data, 8, FullName)
End Function

Public Function ButtonItems(Data As Variant) As Variant
    Dim pan As Variant
    Dim i As Long
    
    On Error GoTo DONE
    pan = Empty
    i = 9
    
    Do Until IsEmpty(ItemAButtonData(Data, i))
        pan = Array(ItemAButtonData(Data, i), pan)
        i = i + 1
    Loop
    
DONE:
    ButtonItems = pan
End Function


'=== button data struncture detail end ===
'=== button tools for data begin ===


Public Sub SetButtonWidth(ButtonA As CommandBarControl, Data As Variant)
    If ButtonWidth(Data) > 0 Then ButtonA.Width = ButtonWidth(Data)
End Sub

Public Sub SetButtonStyle(ButtonA As Object, Data As Variant)
    On Error Resume Next
    ' Each Button does not accept each style, but we won't check them.
    If ButtonStyle(Data) <> 0 Then ButtonA.Style = ButtonStyle(Data)
End Sub

Public Sub SetButtonGroup(ButtonA As CommandBarControl, Data As Variant)
    If ButtonGroup(Data) Then ButtonA.BeginGroup = True
End Sub

Public Sub SetButtonItems(ButtonA As Object, Data As Variant)
    Dim pan As Variant
    Dim HasItem As Boolean
    
    pan = ButtonItems(Data)
    HasItem = False
    
    Do Until IsEmpty(pan)
        ButtonA.AddItem pan(0), 1
        pan = pan(1)
        HasItem = True
    Loop
    If HasItem Then ButtonA.ListIndex = 1
End Sub

Public Sub SetButtonPopup(ButtonA As CommandBarControl, Data As Variant)
    Dim MyChild As Variant
    
    MyChild = StackToArray(ButtonItems(Data))
    If UBound(MyChild) >= 0 Then Add ButtonA, MyChild
End Sub

Public Sub SetButtonState(ButtonA As Object, Data As Variant)
    If Not IsEmpty(ButtonItems(Data)) Then ButtonA.State = msoButtonDown
End Sub


'=== button tools for data end ===
'=== button tools for control object begin ===


Public Sub ComboAddHistory(oAC As Object, Optional AtBottom As Boolean = False)
    If oAC.ListIndex > 0 Then Exit Sub
    
    If AtBottom Then
        oAC.AddItem oAC.Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem oAC.Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Sub ListAddHistory(oAC As Object, Text As String, Optional AtBottom As Boolean = False)
    If AtBottom Then
        oAC.AddItem Text
        oAC.ListIndex = oAC.ListCount
    Else
        oAC.AddItem Text, 1
        oAC.ListIndex = 1
    End If
End Sub

Public Function ListFindIndex(oAC As Object, Text As String) As Long
    Dim i As Long
    For i = 1 To oAC.ListCount
        If oAC.List(i) = Text Then
            ListFindIndex = i
            Exit Function
        End If
    Next
    ListFindIndex = 0
End Function

Public Function ControlText(oAC As Object) As String
    ControlText = oAC.Text
End Function

Public Sub ButtonSwitchOn(oAC As Object)
    oAC.State = msoButtonDown
End Sub

Public Sub ButtonSwitchOff(oAC As Object)
    oAC.State = msoButtonUp
End Sub

Public Function ButtonSwitchToggle(oAC As Object) As Boolean
    ButtonSwitchToggle = (Not IsButtonStateOn(oAC))
    If ButtonSwitchToggle Then
        ButtonSwitchOn oAC
    Else
        ButtonSwitchOff oAC
    End If
End Function

Public Function IsButtonStateOn(oAC As Object) As Boolean
    IsButtonStateOn = (oAC.State = msoButtonDown)
End Function

Public Function ButtonFindByTag(oAC As Object, Tag As Variant) As CommandBarControl
    If oAC Is Nothing Then Exit Function
    If TypeName(oAC) = "CommandBar" Then
        Set ButtonFindByTag = oAC.FindControl(Tag:=Tag)
    Else
        Set ButtonFindByTag = oAC.Parent.FindControl(Tag:=Tag)
    End If
End Function


'=== button tools for control object end ===
'=== button tools for mybar begin ===


Public Function GetButton(TagOrIndex As Variant) As Office.CommandBarControl
    On Error Resume Next
    Select Case TypeName(TagOrIndex)
    Case "Long", "Integer", "Byte", "Double", "Single"
        Set GetButton = MyBar.Controls(TagOrIndex)
    Case Else
        Set GetButton = ButtonFindByTag(MyBar, TagOrIndex)
    End Select
End Function

Public Function GetControlText(TagOrIndex As Variant) As String
    Dim out As String
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    Select Case oAC.Type
    Case msoControlEdit, msoControlDropdown, msoControlComboBox
        out = oAC.Text
    Case Else   ' msoControlButton, msoControlPopup
        out = oAC.Caption
    End Select
    
    Set oAC = Nothing
    GetControlText = out
End Function

Public Function SetControlText(TagOrIndex As Variant, ByVal Text As String) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    Dim Index As Long
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then
        out = False
    Else
        Select Case oAC.Type
        Case msoControlEdit
            oAC.Text = Text
        Case msoControlDropdown
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                ListAddHistory oAC, Text
            Else
                oAC.ListIndex = Index
            End If
        Case msoControlComboBox
            Index = ListFindIndex(oAC, Text)
            If Index = 0 Then
                oAC.Text = Text
                ComboAddHistory oAC
            Else
                oAC.ListIndex = Index
            End If
        Case Else
            oAC.Caption = Text
        End Select
        Set oAC = Nothing
        out = True
    End If
    
    SetControlText = out
End Function

Public Function GetControlState(TagOrIndex As Variant) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        ' return True when the button is pushed down
        out = IsButtonStateOn(oAC)
    End If
    
    Set oAC = Nothing
    GetControlState = out
End Function

Public Function SetControlState(TagOrIndex As Variant, ByVal State As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Type = msoControlButton Then
        If IsButtonStateOn(oAC) <> State Then
            If State Then
                ButtonSwitchOn oAC
            Else
                ButtonSwitchOff oAC
            End If
            ' return True when the status is strictly changed
            out = True
        End If
    End If
    
    Set oAC = Nothing
    SetControlState = out
End Function

Public Function GetControlVisible(TagOrIndex As Variant) As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    GetControlVisible = oAC.Visible
End Function

Public Function SetControlVisible(TagOrIndex As Variant, ByVal Visible As Boolean) As Boolean
    Dim out As Boolean
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    out = False
    If oAC.Visible <> Visible Then
        oAC.Visible = Visible
        ' return True when the visible is strictly changed
        out = True
    End If
    
    SetControlVisible = out
End Function

Public Function IncControlWidth(TagOrIndex As Variant, ByVal Width As Long) As Long
    Dim out As Long
    Dim oAC As Office.CommandBarControl
    
    Set oAC = GetButton(TagOrIndex)
    If oAC Is Nothing Then Exit Function
    
    On Error Resume Next
    oAC.Width = oAC.Width + Width
    ' return the width accepted (tips: setting 0 to width makes it becomes default)
    out = oAC.Width
    
    IncControlWidth = out
End Function


'=== button tools for mybar end ===
'=== helper functions begin ===


Public Function NormalizeArray(x As Variant) As Variant
    On Error Resume Next
    Dim out() As Variant
    Dim i As Long
    Dim L1 As Long
    Dim L2 As Long
    Dim U1 As Long
    Dim U2 As Long
    
    L1 = 0
    L2 = 0
    U1 = -1
    U2 = -1
    
    L1 = LBound(x)
    L2 = LBound(x, 2)   ' error unless 2 dimensions
    U1 = UBound(x)
    U2 = UBound(x, 2)   ' error unless 2 dimensions
    
    If U1 < L1 Then
        NormalizeArray = Array()
        Exit Function
    End If
    
    If U2 = -1 Then
        ReDim out(0 To U1 - L1)
        For i = 0 To UBound(out)
            out(i) = x(i + L1)
        Next
    Else
        ReDim out(0 To U2 - L2)
        For i = 0 To UBound(out)
            out(i) = x(L1, i + L2)
            ' we pick up the 1st line only
        Next
    End If
    
    NormalizeArray = out
End Function

Public Function StackToArray(pan As Variant) As Variant
    Dim out() As Variant
    Dim x As Variant
    Dim i As Long
    Dim Counter As Long
    
    x = Empty
    Counter = 0
    Do Until IsEmpty(pan)
        x = Array(pan(0), x)
        pan = pan(1)
        Counter = Counter + 1
    Loop
    
    If Counter = 0 Then
        StackToArray = Array()
        Exit Function
    End If
    
    ReDim out(0 To Counter - 1)
    i = 0
    Do Until IsEmpty(x)
        out(i) = x(0)
        x = x(1)
        i = i + 1
    Loop
    
    StackToArray = out
End Function


'=== helper functions end ===

'}}}

'code
'   name;BaumMain
'{{{
Option Explicit

' BaumMain addin for ToolBarV2

' using a excel worksheet as a property holder

' we do not support popup on excel sheet at this moment
' no ideas how to describe it wisely on 2 dimensional sheet

Private Tabs As BookTab
Private Helper As ToolBarV2
'Public Helper As ToolBarV2
' we cannot have a public variable in Excel Worksheet

Friend Function GetHelper() As ToolBarV2
    Set GetHelper = Helper
End Function

'=== default main procedures begin ===


' this will called by pressing a button
Public Sub BarMain(Optional oWho As Object = Nothing)
    If Helper Is Nothing Then
        BarInitialize
        BarCustomize
        MsgBox "ツールバーを修復しました。もう一度操作してください。", vbExclamation, BaumMain.Name
    Else
        Main
    End If
End Sub

Private Sub Main()
    Dim oAC As Object   ' this is the button itself pressed
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    ' switch to a main menu procedure
    Select Case oAC.Tag
    Case "file"
        ' nop for popup
    Case "about"
        Menu_about
    Case "sync", "prefer_title", "input_title", "close_saved", "close_unactives"
        Menu_file oAC
    Case Else
        Menu_book oAC
    End Select
    Set oAC = Nothing
End Sub

Private Sub Menu_book(oAC As Object)
    Tabs.OnClick oAC
End Sub

Private Sub Menu_file(oAC As Object)
    Tabs.OnClickFile oAC
End Sub

Private Sub Menu_about()
    Me.Activate
    Tabs.Sync
End Sub


'=== default main procedures end ===
'=== bar customizing begin ===


Public Sub BarCustomize()
    Dim FilePopUp As Office.CommandBarPopup
    Dim OldControl As Office.CommandBarControl
    Dim Data As Variant
    Dim LastButton As Long
    
    Set FilePopUp = Helper.GetButton("file")
    For Each OldControl In FilePopUp.CommandBar.Controls
        OldControl.Delete
    Next
    Data = ConvertRangeToArray(Me.Range("_FileButtons"))
    Helper.AddButtons FilePopUp.CommandBar, Data, ButtonParent
    
    If Tabs Is Nothing Then
        Set Tabs = New BookTab
        Tabs.SetToolBar Helper
        Tabs.PreferTitle = (FilePopUp.CommandBar.FindControl(Tag:="prefer_title").State = msoButtonDown)
        Tabs.InputTitle = (FilePopUp.CommandBar.FindControl(Tag:="input_title").State = msoButtonDown)
    End If
    Tabs.Sync
    
    Application.OnWindow = "BaumMain.OnWindow"
End Sub

Public Sub OnWindow()
    On Error GoTo NoTabs
    Tabs.Sync
    Exit Sub
    
NoTabs:
    Application.OnWindow = ""
End Sub

Public Sub DelaySync(WaitSeconds As Long)
    Const ProcName = "BaumMain.OnWindow"
    Static EarlyTime As Date
    Static LastTime As Date
    
    On Error Resume Next
    
    If LastTime >= Now() Then Application.OnTime EarlyTime, ProcName, LastTime, False
    If WaitSeconds <= 0 Then Exit Sub
    
    EarlyTime = Now() + TimeSerial(0, 0, WaitSeconds)
    LastTime = EarlyTime + TimeValue("0:00:01")
    Application.OnTime EarlyTime, ProcName, LastTime
End Sub


'=== bar customizing end ===
'=== button data begin ===

Public Property Get ButtonData() As Variant
    ButtonData = ConvertRangeToArray(Application.Intersect(GetButtonRow, GetButtonCol))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array(Me.CodeName)
End Property

' above simple property codes are supported by the following range helpers

Private Function GetButtonRow(Optional Address As String = "_ButtonCaption") As Range
    Dim out As Range
    Dim StartAt As Range
    
    Set StartAt = Me.Range(Address)
    If IsEmpty(StartAt.Offset(1, 0).Value) Then
        Set out = StartAt
    Else
        Set out = Me.Range(StartAt, StartAt.End(xlDown))
    End If
    
    Set GetButtonRow = out.EntireRow
End Function

Private Function GetButtonCol(Optional Address As String = "_ButtonCaption") As Range
    Dim StartAt As Range
    Set StartAt = Me.Range(Address)
    Set GetButtonCol = Me.Range(StartAt, StartAt.SpecialCells(xlCellTypeLastCell)).EntireColumn
End Function

Private Function ConvertRangeToArray(Ra As Range) As Variant
    Dim out() As Variant
    Dim i As Long
    
    ReDim out(0 To Ra.Rows.Count - 1)
    For i = 0 To UBound(out)
        out(i) = Ra.Rows(i + 1).Value
    Next
    
    ConvertRangeToArray = out
End Function


'=== button data end ===
'=== constructor / destructor begin ===


Private Function BarName() As String
    BarName = Me.Name & Me.Range("_PublicName").Text & Me.Range("_Timestamp").Text
End Function

Public Sub BarInitialize()
    Dim vMe As Variant
    Set vMe = Me
    Set Helper = New ToolBarV2
    Helper.SetName BarName
    Helper.NewBar vMe
    
    ' add custom bar and events
    BarCustomize
End Sub

Public Sub BarTerminate()
    On Error Resume Next
    Helper.DelBar
    Set Helper = Nothing
    
    ' remove events
    Application.OnWindow = ""
    DelaySync -1
    Set Tabs = Nothing
End Sub


'=== constructor / destructor end ===

'}}}

'class
'   name;BookButton
'{{{
Option Explicit

' single tab class with a button

Private MyButton As Office.CommandBarButton
Private PreferTitle As Boolean

Public BookName As String
Public BookTitle As String

Public Property Get ButtonData() As Variant
    ButtonData = Array(Array(IIf(PreferTitle, BookTitle, BookName), BookTitle, BookName))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array("BaumMain")
End Property

Public Sub SetBook(Wb As Workbook)
    BookName = Wb.Name
    BookTitle = Wb.BuiltinDocumentProperties("Title")
    If BookTitle = "" Then BookTitle = Wb.BuiltinDocumentProperties("Subject")
    If BookTitle = "" Then BookTitle = BookName
End Sub

Public Sub SelectBook(InputTitle As Boolean)
    Dim Wb As Workbook
    Dim Wn As Window
    
    Set Wb = GetBook(BookName)
    If Wb Is Nothing Then Exit Sub
    ' no needs this, Wb does not contain any addins
    'If Wb.IsAddin Then Exit Sub
    
    If Wb Is ActiveWindow.Parent Then
        ToggleCaption InputTitle
    Else
        For Each Wn In Wb.Windows
            If Not Wn.Visible Then Wn.Visible = True
        Next
        StateOn
        Wb.Activate
    End If
End Sub

Public Sub ToggleCaption(InputTitle As Boolean)
    If MyButton Is Nothing Then Exit Sub
    
    If InputTitle And (BookName = BookTitle) Then SetBookTitle
    If MyButton.Caption = BookName Then
        MyButton.Caption = BookTitle
    Else
        MyButton.Caption = BookName
    End If
End Sub

Public Sub SetBookTitle()
    Dim NewTitle As String
    Dim Wb As Workbook
    
    On Error Resume Next
    NewTitle = ActiveCell.Text
    NewTitle = InputBox("ブックタイトルを設定する", "Book Property Title", NewTitle)
    If NewTitle <> "" Then
        BookTitle = NewTitle
        Set Wb = GetBook(BookName)
        If Not Wb Is Nothing Then Wb.BuiltinDocumentProperties("Title") = BookTitle
    End If
End Sub

Public Sub SyncState()
    Dim Wb As Workbook
    
    Set Wb = GetBook(BookName)
    If Wb Is Nothing Then Exit Sub
    
    SetState Wb Is ActiveWindow.Parent
End Sub

Public Sub SetState(ToStateOn As Boolean)
    If ToStateOn Then
        StateOn
    Else
        StateOff
    End If
End Sub

Public Sub StateOn()
    If MyButton Is Nothing Then Exit Sub
    If MyButton.State = msoButtonDown Then Exit Sub
    MyButton.State = msoButtonDown
End Sub

Public Sub StateOff()
    If MyButton Is Nothing Then Exit Sub
    If MyButton.State = msoButtonUp Then Exit Sub
    MyButton.State = msoButtonUp
End Sub

Private Function GetBook(Name As String) As Workbook
    On Error GoTo BookIsGone
    Set GetBook = Workbooks(Name)
    Exit Function
    
BookIsGone:
    Err.Clear
    Set GetBook = Nothing
    MyButton.Enabled = False
End Function

Private Sub SetButton(Bar As ToolBarV2)
    Dim VarMe As Variant
    Dim LastButtonNo As Long
    
    Set VarMe = Me
    LastButtonNo = Bar.WithAddins(VarMe)
    Set MyButton = Bar.GetButton(LastButtonNo)
End Sub

Public Sub Add(Bar As ToolBarV2, Wb As Workbook, NewPreferTitle As Boolean)
    PreferTitle = NewPreferTitle
    SetBook Wb
    SetButton Bar
    SyncState
End Sub

Public Sub Remove()
    On Error Resume Next
    MyButton.Delete
    Set MyButton = Nothing
End Sub

Private Sub Class_Terminate()
    Remove
End Sub

'}}}

'class
'   name;BookTab
'{{{
Option Explicit

' tab controler class with many BookButton objects

Private Buttons As Scripting.Dictionary
Private ToolBar As ToolBarV2
Private LastSync As Single

Public InputTitle As Boolean
Public PreferTitle As Boolean

Private Sub Class_Initialize()
    Set Buttons = New Scripting.Dictionary
End Sub

Private Sub Class_Terminate()
    Buttons.RemoveAll
    Set Buttons = Nothing
    Set ToolBar = Nothing
End Sub

Public Sub Sync()
    Dim Wb As Workbook
    Dim Keys As Collection
    Dim Key As Variant
    Dim NewKey As String
    Dim NewButton As BookButton
    Dim ActiveKey As String
    
    LastSync = Timer()
    ActiveKey = ActiveWindow.Parent.Name
    Set Keys = New Collection
    
    For Each Key In Buttons.Keys
        Keys.Add Key, Key
    Next
    
    For Each Wb In Application.Workbooks
        NewKey = Wb.Name
        If Buttons.Exists(NewKey) Then
            Keys.Remove NewKey
            Buttons(NewKey).SetState NewKey = ActiveKey
        Else
            ' add new comers
            Set NewButton = New BookButton
            NewButton.Add ToolBar, Wb, PreferTitle
            Buttons.Add NewKey, NewButton
        End If
    Next
    
    ' remove old mates gone
    For Each Key In Keys
        Buttons.Remove Key
    Next
    
    Set Keys = Nothing
End Sub

Public Sub SetToolBar(Bar As ToolBarV2)
    Set ToolBar = Bar
End Sub

Public Sub OnClick(oAC As Office.CommandBarControl)
    Dim Key As String
    Dim Button As BookButton
    Const WaitSeconds = 0.3   ' dead time in seconds, avoid too much sync
    
    Key = oAC.Tag
    If Not Buttons.Exists(Key) Then Exit Sub
    
    Set Button = Buttons(Key)
    If Button Is Nothing Then Exit Sub
    
    Button.SelectBook InputTitle
    
    If LastSync <= Timer() And Timer() < LastSync + WaitSeconds Then
        BaumMain.DelaySync Round(0.5 + WaitSeconds)
    Else
        Sync
    End If
End Sub

Public Sub OnClickFile(oAC As Office.CommandBarControl)
    Select Case oAC.Tag
    Case "sync"
        Sync
    Case "prefer_title"
        PreferTitle = ToolBar.ButtonSwitchToggle(oAC)
    Case "input_title"
        InputTitle = ToolBar.ButtonSwitchToggle(oAC)
    Case "close_saved"
        CloseSaved
        Sync
    Case "close_unactives"
        CloseUnactives
        Sync
    End Select
End Sub

Private Sub CloseSaved()
    Dim Wb As Workbook
    
    For Each Wb In Application.Workbooks
        If Wb Is ThisWorkbook Then GoTo SKIP
        If Not Wb.Saved Then GoTo SKIP
        
        Wb.Close
SKIP:
    Next
End Sub

Private Sub CloseUnactives()
    Dim Wb As Workbook
    Dim ActiveName As String
    
    ActiveName = ActiveWorkbook.Name
    For Each Wb In Application.Workbooks
        If Wb Is ThisWorkbook Then GoTo SKIP
        If Wb.Name = ActiveName Then GoTo SKIP
        
        Wb.Close False
SKIP:
    Next
End Sub

'}}}

'code
'   name;ThisWorkbook
'{{{
Option Explicit

Private Sub Workbook_Open()
    BaumMain.BarInitialize
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    BaumMain.BarTerminate
End Sub

'}}}

'ssf-end

