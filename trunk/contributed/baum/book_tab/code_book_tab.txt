'require
'  ;{420B2830-E718-11CF-893D-00A0C9054228} 1 0 Microsoft Scripting Runtime


'code
'  name;BaumMain
'{{{
Option Explicit

' BaumMain addin for ToolBarV2

' using a excel worksheet as a property holder

' we do not support popup on excel sheet at this moment
' no ideas how to describe it wisely on 2 dimensional sheet

Private Tabs As BookTab
Private Helper As ToolBarV2
'Public Helper As ToolBarV2
' we cannot have a public variable in Excel Worksheet

Friend Function GetHelper() As ToolBarV2
    Set GetHelper = Helper
End Function

'=== default main procedures begin ===


' this will called by pressing a button
Public Sub BarMain(Optional oWho As Object = Nothing)
    If Helper Is Nothing Then
        BarInitialize
        BarCustomize
        MsgBox "ツールバーを修復しました。もう一度操作してください。", vbExclamation, BaumMain.Name
    Else
        Main
    End If
End Sub

Private Sub Main()
    Dim oAC As Object   ' this is the button itself pressed
    Set oAC = Application.CommandBars.ActionControl
    If oAC Is Nothing Then Exit Sub
    ' switch to a main menu procedure
    Select Case oAC.Tag
    Case "file"
        ' nop for popup
    Case "about"
        Menu_about
    Case "sync", "prefer_title", "input_title", "close_saved", "close_unactives"
        Menu_file oAC
    Case Else
        Menu_book oAC
    End Select
    Set oAC = Nothing
End Sub

Private Sub Menu_book(oAC As Object)
    Tabs.OnClick oAC
End Sub

Private Sub Menu_file(oAC As Object)
    Tabs.OnClickFile oAC
End Sub

Private Sub Menu_about()
    Me.Activate
    Tabs.Sync
End Sub


'=== default main procedures end ===
'=== bar customizing begin ===


Public Sub BarCustomize()
    Dim FilePopUp As Office.CommandBarPopup
    Dim OldControl As Office.CommandBarControl
    Dim Data As Variant
    Dim LastButton As Long
    
    Set FilePopUp = Helper.GetButton("file")
    For Each OldControl In FilePopUp.CommandBar.Controls
        OldControl.Delete
    Next
    Data = ConvertRangeToArray(Me.Range("_FileButtons"))
    Helper.AddButtons FilePopUp.CommandBar, Data, ButtonParent
    
    If Tabs Is Nothing Then
        Set Tabs = New BookTab
        Tabs.SetToolBar Helper
        Tabs.PreferTitle = (FilePopUp.CommandBar.FindControl(Tag:="prefer_title").State = msoButtonDown)
        Tabs.InputTitle = (FilePopUp.CommandBar.FindControl(Tag:="input_title").State = msoButtonDown)
    End If
    Tabs.Sync
    
    Application.OnWindow = "BaumMain.OnWindow"
End Sub

Public Sub OnWindow()
    On Error GoTo NoTabs
    Tabs.Sync
    Exit Sub
    
NoTabs:
    Application.OnWindow = ""
End Sub

Public Sub DelaySync(WaitSeconds As Long)
    Const ProcName = "BaumMain.OnWindow"
    Static EarlyTime As Date
    Static LastTime As Date
    
    On Error Resume Next
    
    If LastTime >= Now() Then Application.OnTime EarlyTime, ProcName, LastTime, False
    If WaitSeconds <= 0 Then Exit Sub
    
    EarlyTime = Now() + TimeSerial(0, 0, WaitSeconds)
    LastTime = EarlyTime + TimeValue("0:00:01")
    Application.OnTime EarlyTime, ProcName, LastTime
End Sub


'=== bar customizing end ===
'=== button data begin ===

Public Property Get ButtonData() As Variant
    ButtonData = ConvertRangeToArray(Application.Intersect(GetButtonRow, GetButtonCol))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array(Me.CodeName)
End Property

' above simple property codes are supported by the following range helpers

Private Function GetButtonRow(Optional Address As String = "_ButtonCaption") As Range
    Dim out As Range
    Dim StartAt As Range
    
    Set StartAt = Me.Range(Address)
    If IsEmpty(StartAt.Offset(1, 0).Value) Then
        Set out = StartAt
    Else
        Set out = Me.Range(StartAt, StartAt.End(xlDown))
    End If
    
    Set GetButtonRow = out.EntireRow
End Function

Private Function GetButtonCol(Optional Address As String = "_ButtonCaption") As Range
    Dim StartAt As Range
    Set StartAt = Me.Range(Address)
    Set GetButtonCol = Me.Range(StartAt, StartAt.SpecialCells(xlCellTypeLastCell)).EntireColumn
End Function

Private Function ConvertRangeToArray(Ra As Range) As Variant
    Dim out() As Variant
    Dim i As Long
    
    ReDim out(0 To Ra.Rows.Count - 1)
    For i = 0 To UBound(out)
        out(i) = Ra.Rows(i + 1).Value
    Next
    
    ConvertRangeToArray = out
End Function


'=== button data end ===
'=== constructor / destructor begin ===


Private Function BarName() As String
    BarName = Me.Name & Me.Range("_PublicName").Text & Me.Range("_Timestamp").Text
End Function

Public Sub BarInitialize()
    Dim vMe As Variant
    Set vMe = Me
    Set Helper = New ToolBarV2
    Helper.SetName BarName
    Helper.NewBar vMe
    
    ' add custom bar and events
    BarCustomize
End Sub

Public Sub BarTerminate()
    On Error Resume Next
    Helper.DelBar
    Set Helper = Nothing
    
    ' remove events
    Application.OnWindow = ""
    DelaySync -1
    Set Tabs = Nothing
End Sub


'=== constructor / destructor end ===
'}}}

'class
'  name;BookButton
'{{{
Option Explicit

' single tab class with a button

Private MyButton As Office.CommandBarButton
Private PreferTitle As Boolean

Public BookName As String
Public BookTitle As String

Public Property Get ButtonData() As Variant
    ButtonData = Array(Array(IIf(PreferTitle, BookTitle, BookName), BookTitle, BookName))
End Property

Public Property Get ButtonParent() As Variant
    ButtonParent = Array("BaumMain")
End Property

Public Sub SetBook(Wb As Workbook)
    BookName = Wb.Name
    BookTitle = Wb.BuiltinDocumentProperties("Title")
    If BookTitle = "" Then BookTitle = Wb.BuiltinDocumentProperties("Subject")
    If BookTitle = "" Then BookTitle = BookName
End Sub

Public Sub SelectBook(InputTitle As Boolean)
    Dim Wb As Workbook
    Dim Wn As Window
    
    Set Wb = GetBook(BookName)
    If Wb Is Nothing Then Exit Sub
    ' no needs this, Wb does not contain any addins
    'If Wb.IsAddin Then Exit Sub
    
    If Wb Is ActiveWindow.Parent Then
        ToggleCaption InputTitle
    Else
        For Each Wn In Wb.Windows
            If Not Wn.Visible Then Wn.Visible = True
        Next
        StateOn
        Wb.Activate
    End If
End Sub

Public Sub ToggleCaption(InputTitle As Boolean)
    If MyButton Is Nothing Then Exit Sub
    
    If InputTitle And (BookName = BookTitle) Then SetBookTitle
    If MyButton.Caption = BookName Then
        MyButton.Caption = BookTitle
    Else
        MyButton.Caption = BookName
    End If
End Sub

Public Sub SetBookTitle()
    Dim NewTitle As String
    Dim Wb As Workbook
    
    On Error Resume Next
    NewTitle = ActiveCell.Text
    NewTitle = InputBox("ブックタイトルを設定する", "Book Property Title", NewTitle)
    If NewTitle <> "" Then
        BookTitle = NewTitle
        Set Wb = GetBook(BookName)
        If Not Wb Is Nothing Then Wb.BuiltinDocumentProperties("Title") = BookTitle
    End If
End Sub

Public Sub SyncState()
    Dim Wb As Workbook
    
    Set Wb = GetBook(BookName)
    If Wb Is Nothing Then Exit Sub
    
    SetState Wb Is ActiveWindow.Parent
End Sub

Public Sub SetState(ToStateOn As Boolean)
    If ToStateOn Then
        StateOn
    Else
        StateOff
    End If
End Sub

Public Sub StateOn()
    If MyButton Is Nothing Then Exit Sub
    If MyButton.State = msoButtonDown Then Exit Sub
    MyButton.State = msoButtonDown
End Sub

Public Sub StateOff()
    If MyButton Is Nothing Then Exit Sub
    If MyButton.State = msoButtonUp Then Exit Sub
    MyButton.State = msoButtonUp
End Sub

Private Function GetBook(Name As String) As Workbook
    On Error GoTo BookIsGone
    Set GetBook = Workbooks(Name)
    Exit Function
    
BookIsGone:
    Err.Clear
    Set GetBook = Nothing
    MyButton.Enabled = False
End Function

Private Sub SetButton(Bar As ToolBarV2)
    Dim VarMe As Variant
    Dim LastButtonNo As Long
    
    Set VarMe = Me
    LastButtonNo = Bar.WithAddins(VarMe)
    Set MyButton = Bar.GetButton(LastButtonNo)
End Sub

Public Sub Add(Bar As ToolBarV2, Wb As Workbook, NewPreferTitle As Boolean)
    PreferTitle = NewPreferTitle
    SetBook Wb
    SetButton Bar
    SyncState
End Sub

Public Sub Remove()
    On Error Resume Next
    MyButton.Delete
    Set MyButton = Nothing
End Sub

Private Sub Class_Terminate()
    Remove
End Sub
'}}}

'class
'  name;BookTab
'{{{
Option Explicit

' tab controler class with many BookButton objects

Private Buttons As Scripting.Dictionary
Private ToolBar As ToolBarV2
Private LastSync As Single

Public InputTitle As Boolean
Public PreferTitle As Boolean

Private Sub Class_Initialize()
    Set Buttons = New Scripting.Dictionary
End Sub

Private Sub Class_Terminate()
    Buttons.RemoveAll
    Set Buttons = Nothing
    Set ToolBar = Nothing
End Sub

Public Sub Sync()
    Dim Wb As Workbook
    Dim Keys As Collection
    Dim Key As Variant
    Dim NewKey As String
    Dim NewButton As BookButton
    Dim ActiveKey As String
    
    LastSync = Timer()
    ActiveKey = ActiveWindow.Parent.Name
    Set Keys = New Collection
    
    For Each Key In Buttons.Keys
        Keys.Add Key, Key
    Next
    
    For Each Wb In Application.Workbooks
        NewKey = Wb.Name
        If Buttons.Exists(NewKey) Then
            Keys.Remove NewKey
            Buttons(NewKey).SetState NewKey = ActiveKey
        Else
            ' add new comers
            Set NewButton = New BookButton
            NewButton.Add ToolBar, Wb, PreferTitle
            Buttons.Add NewKey, NewButton
        End If
    Next
    
    ' remove old mates gone
    For Each Key In Keys
        Buttons.Remove Key
    Next
    
    Set Keys = Nothing
End Sub

Public Sub SetToolBar(Bar As ToolBarV2)
    Set ToolBar = Bar
End Sub

Public Sub OnClick(oAC As Office.CommandBarControl)
    Dim Key As String
    Dim Button As BookButton
    Const WaitSeconds = 0.3   ' dead time in seconds, avoid too much sync
    
    Key = oAC.Tag
    If Not Buttons.Exists(Key) Then Exit Sub
    
    Set Button = Buttons(Key)
    If Button Is Nothing Then Exit Sub
    
    Button.SelectBook InputTitle
    
    If LastSync <= Timer() And Timer() < LastSync + WaitSeconds Then
        BaumMain.DelaySync Round(0.5 + WaitSeconds)
    Else
        Sync
    End If
End Sub

Public Sub OnClickFile(oAC As Office.CommandBarControl)
    Select Case oAC.Tag
    Case "sync"
        Sync
    Case "prefer_title"
        PreferTitle = ToolBar.ButtonSwitchToggle(oAC)
    Case "input_title"
        InputTitle = ToolBar.ButtonSwitchToggle(oAC)
    Case "close_saved"
        CloseSaved
        Sync
    Case "close_unactives"
        CloseUnactives
        Sync
    End Select
End Sub

Private Sub CloseSaved()
    Dim Wb As Workbook
    
    For Each Wb In Application.Workbooks
        If Wb Is ThisWorkbook Then GoTo SKIP
        If Not Wb.Saved Then GoTo SKIP
        
        Wb.Close
SKIP:
    Next
End Sub

Private Sub CloseUnactives()
    Dim Wb As Workbook
    Dim ActiveName As String
    
    ActiveName = ActiveWorkbook.Name
    For Each Wb In Application.Workbooks
        If Wb Is ThisWorkbook Then GoTo SKIP
        If Wb.Name = ActiveName Then GoTo SKIP
        
        Wb.Close False
SKIP:
    Next
End Sub
'}}}

